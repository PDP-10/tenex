[This version is currently on <NEWSYS>.]		<DOC>TV.UPDATE

	     NEW FEATURES OF DATAMEDIA/TEC/IMLAC TV-EDIT
10-Oct-75    *******************************************
=========

CONTENTS

1.  CHANGES TO COMMANDS:  F, G, @, fixing a place to go to, .L,
      .U, and X 
2.  CR IN INSERT MODE; TABS:  Minor modifications
3.  STRINGS:  <log-in>TV-STRINGS.PMAP; '(Strings)' in starting TV
4.  TV DIRECTORY:  Conserving file space


		     1.  CHANGES TO COMMANDS
			 ------- -- --------

Save-and-continue.

    $F		Replaces  $$.F

Go to Page.Line.

    $+m.nG	Go to current page + m,  line  n.   $+G  is now
		equivalent to  $G
    $-m.nG	Go to current page - m,  line  n.   $-G  goes to top
		of previous page.
    $@		Go to next place in the place list.  Replaces  $+G
    $-@		Go to the last fixed place.

Fixing a place to go to (NEW FEATURE).

    $.@		Fix current place for further reference.

Current place can also be fixed by typing two ESCs (or EDIT-ESC)
before  G  and  @  commands:

    $$nG	Fix current place, go to  n.   NOTE:  $$G  no longer
		takes to end of file.  Use  $999G  instead.
    $$@		Fix current place and go to next place in place list.
    $$-@	Fix current place and go to last fixed place.  This 
		allows bouncing back and forth between two places in
		a file.

	RESTRICTIONS:  There is only one fixed place at a time.  It
	is stored as a page.line number and is NOT updated when page
	marks and lines are inserted and deleted.  You cannot (yet)
	fix a place in one file and get there while editing another
	file.  The fixed place is not saved from one editing session
	to the next.

Converting words and lines to upper or lower case.

    $n.U<DEL>	Convert  n  words to upper case.
    $n.L<DEL>	Convert  n  words to lower case.

    $n.U<CR>	Convert  n  lines to upper case.
    $n.L<CR>	Convert  n  lines to lower case.

	Nothing comes free.  To convert individial letters, an extra
	character must be typed, e.g.,

    $n.UU	Convert  n  characters to upper case (this used to
		  be "$n.U").
    $n.LL	Convert  n  characters to lower case.

Pointing.

    $nX		Point to column  n  of the current line.
		NEW FEATURE:  If target column is beyond the righ or
		left margin, the line shifts to bring target to view.


		    2.  CR IN INSERT MODE; TABS 
			-- -- ------ ----  ----
		
     Typing a RETURN while inserting within a line is now a no-op (it
beeps).  "$I<CR>" still inserts a line above the current line.

     The TAB "accordian" is now less of an accordian than before.
Inserting and deleting of text is propagated to the first TAB but not
beyond.  Inserting and deleting of TABs is not propagated.  It is now
easier to delete TABs.  Setable TABs similar to those on a typewriter
are yet to come.


			   3.  STRINGS
			       -------

     TV-STRINGS.PMAP file is now taken from the log-in directory.  It
used to come from the connected directory, and has resulted in users'
picking up strange strings and damaging their text files with them.

     The '(Strings)' request at the beginning of edit is gone, and
you can no longer permanently assign a set of strings to a file.
This feature was used in only five of over 2500 TV files at IMSSS
and SUMEX.  String sets addressed by the letters A...Z still exist.
$$.R. and $$.D. now refer to the last "letter" set accessed during
an editing session, or to the default set if none has been accessed.


			 4.  TV DIRECTORY
			     -- ---------

     TV directory, which aids in locating text pages of a file, used
to occupy file page (TENEX page) 777 (octal).  This ment one-page
overhead for each TV file.  For files less than 20 pages, the dir-
ectory is now stored on the page where the text ends, beyond the EOF
pointer, provided that it fits there (in 98% of the files it does).
If it does not fit and the file is at least 3 pages the directory is 
stored on page 777.   For files with 20 pages or more (about 5% of TV
files have over 20 pages) page 777 is always used as a protection
against losing the directory when the file is appended to.

P.S.  Due to the fact that a number of programs (SOS among them) read
past the end-of-file pointer, this feature has been disabled.  It was
nice while it lasted.


5-Aug-75
========

CONTENTS

1.  NEW COMMANDS.  -T, .W, .), .(, $$.R, and $$.H
2.  CHANGES TO OLD COMMANDS.  O, J, B, ^, LF, \, CR, -I, -D, -Z, $$K,
      0D<DEL>, and $A after $$.U or $$.L
3.  NEW FEATURES.  File last edited; Window dimensions.
4.  OLD BUGS.  String search; Large files.



			 1.  NEW COMMANDS
			     --- --------

Searching backwards.

    $-nT<string>    Backward string search of  n  lines.  Searching 
		    proceeds up by lines, and left to right within a
		    line.  Backward search takes about 1.5 times as 
		    long as forward search.

Additional windowing control.

    $n.W	    Scroll the screen so as to make the current line 
		    the  nth  from the top.   $.W  puts current line 
		    to the top and  $$.W  puts it to the bottom.

    $-n.W	    Make current line the  nth  from the bottom.

Moving cursor past words to beginnings of blank fields.  A way to get
to ends of words.

    $n.)	    Point to the  nth  blank field on the right.
    $n.(	    Point to the  nth  blank field on the left.

Next two commands offer relief when a line or word delete buffer is
full and the user no longer wishes to keep the stored lines/words.
These commands only unprotect the saved items.  They dissapear beyond
recovery when further items are deleted.

    $$.R<CR>	    Release line delete buffer.
    $$.R<DEL>	    Release word delete buffer.

Changing file mode (uppercase/lowercase) in the middle of an edit.

    $$.H	    Shift file mode from the current case (upper or 
		    lower) to the opposite.  The new case becomes the 
		    default for the file (it is remembered in the user 
		    setable word of the file descriptor block).

		    2.  CHANGES TO OLD COMMANDS
		        ------- -- --- --------

Mistaken "oops".

    $O		    When you are entering text and accidentally type
		    $O  when intending to type  $I  your lose your line.
		    You can now do a second oops to get the lost line 
		    back (sometimes it comes back on the third).

Joining and breaking of lines.

    $nJ		    Join current line to the next and insert  n  spaces
		    in between.

    $$J		    Join current line to the next leaving leading
		    blanks of the next line alone.  Trailing blanks
		    right of the cursor are lost.  If cursor poins
		    beyond the last visible character of a line,
		    beginning of the next line is brought there.

    $nB		    Break current line and insert  n  spaces in front 
		    of the new line.  $B  means  $0B  instead of  $1B.

    $$B		    Break the line leaving blanks as they were.  This
		    is equivalent to the old  $B.

		    Also try  $-nJ, $-nB, $$-J, and $$-B.

'Up cursor' from top of screen, and 'down cursor' from bottom of screen
or at end of file, have been too stingy in the past causing unwanted
overtyping.

    $^		    Up.  Screen will scroll if current line is top line.
		    $n^  (and  $$^)  does not cause scrolling.

    <LF>, $\	    Down.  Screen will scroll if current line is bottom 
		    line.  Makes a new line at end of file.   $n<LF>  
		    and  $n\  do not.

    $<CR>	    New line.  Makes a new line at end of file.  $n<CR>
		    does not.

Inserting and deleting.

    $-nI<CR>	    Insert  n  blank lines above the current line and
		    leave cursor on the (old) current line.

    $-nD<CR>	    Delete lines, zap lines.  These commands delete 
    $-nZ<CR><char>  lines from above the current line and leave the 
		    current line intact.

    $$K		    Puts the deleted end of the line in the line delete
		    buffer from where it can be retrieved with  $R<CR>.

Word mode handling has been rewritten.  The commands most affected are:

    $nD<DEL>	    Delete  n  words.  If cursor points at a blank, the
		    blank area from the current position to the begin-
		    ning of next word counts as one word.

    $0D<DEL>	    Delete to end of curren blank field, but do nothing 
		    if cursor points at a visible character.  This is 
		    useful in left-justifying text.

    $-nD<DEL>	    Delete words, zap words.  These commands delete 
    $-nZ<DEL><chr>  words on the left and leave the current word intact.

Converting consecutive lines to upper or lower case.

    $$.U, $$.L	    Again command  $A  after  $$.U  or  $$.L  converts 
		    the NEXT line.


			 3.  NEW FEATURES
			     --- --------

     FILE LAST EDITED.  The name of the file last edited is stored in
TV-STRINGS.PMAP and offered as the default at the beginning of a new
editing session.

     WINDOW DIMENSIONS.  The height and width of the window last in use
is saved in TV-STRINGS.PMAP and restored at the beginning of a new
editing session.


			   4.  OLD BUGS
			       --- ----

     STRING SEARCH.  Occasionally T-search would find a word but would
display a wrong window.  Two cases in which this used to occur have
been identified and correcred.

     LARGE FILES.  TV uses file space between end of file and page 770
(octal) as temporary output space.  Filling up of this space has caused
the editing to abort rather than allowing orderly finish.  Straighten-
ing out of the resulting file has been a tidious chore.  New version of
TV warns the user of insufficient work space and lets him finish the
edit.


5-May-75
========

     1.  Maximum line length is 300, formerly 150.

     2.  Normal margins are marked with colons (:), long lines with 
	 asterisks (*), and indicator lines with the equals sign (=),
	 formerly dots (.), dashes (-), and asterisks (*), respectively.

     3.  Long file names will not cause the "DIRECTORY FULL" message.


22-Mar-75
=========

     1.  RANDOM ACCESS.
     2.  WHAT HAPPENS TO YOUR FILE WHILE EDITING.
     3.  RECOVERING AFTER CRASH OR ^C EXIT.
     4.  WAYS TO LOSE A FILE.
     5.  COMMANDS FOR MAKING A NEW VERSION AT FINISH.
     6.  SOS FILES.
     7.  CHANGES TO OLD COMMANDS:  $$/, $$", $$.F, $G, $T, $-W, and $=.


     1.  RANDOM ACCESS.

The main news is RANDOM ACCESS.  The sole purpose of random access is 
to put any part of a text file within fast reach.  The speed-up is most
noticable with the  $nG  and  $$.F  commands, but also  $$F  and string 
search are somewhat faster.  Furthermore, your most recent editing 
(since the last  $$.F) has now a better chance of surviving a system 
crash.

     Frequent use of  $$.F  is recommended.

     The cost of random access is file (disk) space.  One file page 
(page '777) is maintained as a directory.  It tells where in the file 
the text page marks are located.  Disk pages of a random access text 
file are not usually fully packed since both inserting and deleting of 
text can bring about wasted space.  You should expect the resulting 
files to be 20% bigger than the old TV-Edit files (which were fully
packed and had no page directory) and 10% bigger than SOS files (which 
have line numbers and other wasted space).


     2.  WHAT HAPPENS TO YOUR FILE WHILE EDITING.

While editing, the file is kept in a special TV-Edit format, and only 
the new TV-Edit can properly access it.  When editing is finished (with
$$F), the format is changed back to normal, making the file available 
to other programs.  An attempt by other programs to read an unfinished 
file results in a warning message.

		      ***  W A R N I N G  ***

If editing is aborted with  ^C  or a system crash, you must next time 
edit the file with the NEW TV-Edit.  Editing it with the old TV will
destroy information necessary for recovering from the crash, resulting
in the loss of the entire file!

     In the edit-time file format the first 512-word disk page (file 
page 0) contains the warning message, subsequent disk pages contain the
original file as it appeared at the start of the editing session (disk 
page 0 is moved to the end of the original file to make room for the 
warning message), updated disk pages are stored just below disk page 
770 (octal), and disk pages 775-777 contain the access information to 
the file.  When finished, disk page 777 remains and it tells where the 
page marks of the text file are located.  It is this page directory 
that makes possible random accessing by TV.  The directory is not 
necessary for reading the file by other programs.


     3.  RECOVERING AFTER CRASH OR ^C EXIT.

When starting to edit after a crash (or a  ^C  exit), the editor takes 
you to the approximate place of the crash and inserts two page marks.  
The text above the page marks is the most recent, and any duplication 
of it below is older and hence a candidate for deletion.  (Unless the 
page marks appear at the beginning of the file, the first line below 
the page marks is the tail end of a line above the page marks.)--The 
duplication of text results from an attempt to hang onto as much of 
your most recent editing as possible.

     SCRAMBLED WINDOW.  Sometimes a crash leaves behind a scrambled 
window.  It is always below the spot where the editor starts after a 
crash, and it fills exactly one window (23 lines).  This scrambled 
window is marked off by double page marks both above and below, and 
the lines within are usually out of order.  After cleanup, look for a 
copy of the bottom line just below the page marks.--A scrambled window 
is produced when the ".WAIT.0.." message appears, but is cleaned up 
subsequently unless preserved by a system crash.  It is a monument to 
substandard programming.


     4.  WAYS TO LOSE A FILE.

If a crashed file is edited with another editor, the old TV, for in-
stance, and that editing is finished, or if a crashed file is appended 
by some program, partial or total loss of the file occurs.  The warn-
ing message in the beginning of the file is designed to minimize the
hazard.  The proper procedure is to abort, with CTRL-C, any program
that allows you to read the warning message, and edit and finish with
the new TV-Edit.


     5.  COMMANDS FOR MAKING A NEW VERSION AT FINISH.

The edited file can either replace the old version of the file or
become a new version at the time of finish.  The default is "create
new version" for crashed files and files in other than connected di-
rectory, "replace old version" otherwise.  You can beat the default 
by giving a count in conjunction with an "F" command:

	$$1F   Finish, replace old version (results in 1 version).
	$$2F   Finish, make a new version (results in 2 versions).
	$$1.F  Save-and-continue, clear the new version request.
		 --An appropriate time to use this command is after 
		 a crashed file has been cleaned up and a backup is 
		 no longer deemed necessary.
	$$2.F  Save-and-continue, set the new version request.
		 --Use this command as soon as you decide that you
		 want to retain a backup version.  You will then 
		 be free to forget it when actually finishing.
	$$F    Finish, new version generation according to the most 
		 recent request.

$$.F (no count given) leaves the new version request unchanged.

     If a new version is generated, the old version is returned to 
its original form, i.e., as it was at the beginning of the editing 
session.


     6.  SOS FILES.  

You can choose to retain or delete SOS line numbers when you start to 
edit.  Request to retain or delete comes after the "(Strings)" request 
in the initial dialogue.  The default is to Delete.  Regardless of your
choice, the file is copied and the original file retained as an old 
version.--In Read-only mode the SOS line numbers are always displayed.


     7.  CHANGES TO OLD COMMANDS:  $$/, $$", $$.F, $G, $T, $-W, and $=.

     DEFINING AND RETRIEVING STRINGS (MODIFIED).  Users of strings are 
familiar with the message ".ALREADY.DEFINED...'Y'.TO.REDIFINE.. etc.".
In the new TV you can avoid this message by typing two ESCs before the 
/ or " when redefining a string:

	$$/    Begin string definition; no hassles, please.
	$$"    Define a string according to the text on the
		 window; no hassles, please.

     The double quote (") command no longer takes its string ID from 
the file.  The user has to type it in.  When retrieving strings with 
the "$R <string ID>" command, only the string body is written in the 
file (the old format was:  String ID, string body, /).--The new format
is designed to be used for transporting text from one part of the file
to another, or to a different file.  The old format was better suited
for storing string definitions in a text file.  That function has
since been taken over by the  $$.Dx  and  $$.Rx  commands, and the
TV-STRINGS.PMAP file.

     OTHER REFINEMENTS.

 -- $$.F,  $G  and  $T  commands are more economical in updating the 
    display.

 -- $-W  puts cursor to the top of window if current line moves out 
    of view.

 -- Output format of the  $=  command has been changed.

 -- Several old bugs were discovered and replaced with a host of new
    ones yet to be discoversed.

12-Sept-74
==========

Current changes to TV-Edit deal with:

  (i) starting the edit, .PL files;
 (ii) new Datamedia keyboard with EDIT key;
(iii) save-and-continue; and 
 (iv) saving and loading of command strings, TV-STRINGS.PMAP files.

     New commands are:  
$+G,  $$.F,  $$.Dx,  $$.D.,  $$.Rx,  $$.R.,  and  $$.R0,  
where  x  stands for a letter.


STARTING
--------
     The starting dialog has four questions.  Whenever a default
option exists, it is displayed to the left of a double slash "//".
Use 'CR' or 'ESC' to accept the default.  'ESC' will skip over the 
remaining questions (it is the expert's way to "get with it").
Use the  ?  to find out about the possible answers to each question.

     The starting questions are:

(FILE NAME).  For default options, [confirm] the name with an 'ESC'.

(PAGE.LINE).  Place to go to.  Default is the place of last finish.
   A list of places to edit can also be read from page 1 of a speci-
   ally named file.  The place list file for the file "name.ext" is
   called "#name-ext.PL".  The editor command  $+G  takes through 
   consecutive places in the list.--The SEARCH program is able to 
   generate appropriate place list files.  (See SEARCH.MANUAL for 
details.)

(MODE).  Default is Write mode for files in your own (connected) di-
   rectory, Read-only for files in other directories.  In write mode,
   the "L" or "U" of last time is the default.

(STRINGS).  You can make or break an association between the text
   file and a set of command strings.  No loading of strings takes
   place here.  Loading and saving is done by editor commands.  For
   details, see Section "STRINGS" below.


     IMPLEMENTATION.  File mode (U or L), the place of last finish,
and the assignment of a set of strings is "remembered" in the user 
setable word of the File Descriptor Block (FDB).  This word is up-
dated only when editing in write mode.  Note also thet in COPYing 
the file or rewriting it by some other program (e.g., in switching 
between different editors), this information is not copied.


EDIT KEY
---- ---
     The EDIT key is used to type commands.  Instead of typing an
'ESC' and then a command letter, type the command letter while de-
pressing the EDIT key.  Commands that used to require the typing of
two ESCs can now be typed with one ESC and the EDIT key.



SAVE-AND-CONTINUE
---- --- --------

$$.F  will finish writing the output file, restart the edit, and 
      return to the place where the  $$.F  command was typed while
      ".YOU.WILL.HAVE.TO.WAIT.".  This gives some protection against
      system crash.



STRINGS
-------
     Commands now exist for saving and loading of all strings at 
once.  Sets of strings are identified by the letters A,...,Z.  The 
commands for saving and loading a set are (x  stands for a letter):

   SAVING (*)
$$.Dx	Strings currently in memory are filed (Dumped) under  x.
$$.D.	Strings in memory are filed in the currently assigned set.

   LOADING (**)
$$.Rx	Load (Read) strings from set  x.
$$.R.	Load currently assigned strings.
$$.R0	Clear strings in memory.

NOTES:
 (*) In saving, the set in the file is REPLACED by the set currently
     in memory.
(**) In loading, the set in file is MERGED to the set currently in 
     memory.  Thus a string in memory is redefined only if it is de-
     fined in the set being loaded from file.

     AUTOMATIC SAVING AND LOADING.  In addition to the sets of 
strings identified by the letters, there is a set called the "last
set".  Strings in memory are saved as the last set whenever editing 
is FINISHED.  The last set is automatically loaded when the editor 
is STARTED.  The  $$.Dx  and  $$.Rx  commands refer to the last set
if  x  is not a letter or a special character (non-0 digit is ok.).

     IMPLEMENTATION.  A special file 'TV-STRINGS.PMAP' is created in
your directory.  The letters refer to TENEX pages of this file.  The
letter  A,  for instance, refers to page 101 octal, the "last set"
to page 0.  The strings are stored in the TV-STRINGS.PMAP file in a
special TV-Edit format (which is not standard text format).  The file
cannot be read using the TYPE command.

     DELETING PAGES of the 'TV-STRINGS.PMAP'-FILE.  If  $$.Dx  command 
is given when there are no strings in memory (you have just executed 
the  $$.R0  command), page  x  of the string file is removed from the 
file.  This is a way to delete unnecessary pages from the string file.
There is no point in trying to delete the file.  It comes back every 
time when you use TV-Edit.



