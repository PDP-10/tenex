;<SCHOEN>JSIM.MAC;2     6-Apr-80 08:47:35    EDIT BY SCHOEN


	title jsim
	subttl simulate some TENEX JSYS's on TOPS20 for PUP code

	search sysdef
	ifn ft10x,<printx JSIM not required on TENEX
		   end>

	search pupdef,psvdef,monsym 
	usevar ftpvar,ftppvr

opdef	call	[pushj p,]
opdef	ret	[popj p,]
opdef	callret	[jrst]

	INTERN .cnchk,.cncon,.cnpxy,.gdacc,.cfgrp

skprtn:	aos 0(p)
retn:	ret

; macro to define JSYS error returns
define reterr (error,errac<1>),<
	jrst  [movei 1,error
	       movem 1,errac+pac
	       jsr .mretn
	       move p,ppc
	       ret] 
>
define retgd,<
	jsr .mretn
	jrst skprtn
>
; ac save/restore
; saves/restores 0 - 16
highac==16		;last ac to save
.mentr:	0
	movem highAC,pac+highAC
	movei highAC,pac
	blt highAC,highAC-1
	movem p,ppc
	jrst @.mentr

.mretn:	0
	movsi highAC,pac
	blt highAC,highAC
	jrst @.mretn

ls pac,20
ls ppc

; CNDIR simulations

; CNDIR ERROR MNEMONICS:

CNDIX1=600200		;invalid password
CNDIX3=600202		;invalid directory #
CNDIX4=600203		;logged in  (strange error)
CNDIX5=600204		;not logged in

; routine to connect to a directory.  Changes the fork's entry in the
; connected-directory table but not the login table.
; allows connect if group privileges sufficient, but does NOT take
; into account enabled status of fork.
; accepts 1/36-bit directory number
;	  2/pointer to password
; returns +1 if failure; ac1 contains failure code (tenex CNDIR JSYS code)
; returns +2 if successful.
.cncon:	jsr .mentr		;save ACs
	movsi 3,(1b0)
	call .cnchk
	 call screwup##
	movem 1,c.cnam		;save new connected directory in table
	call savcdn		;also save the string of the connected dir
	retgd			;leave good
; routine to implement TENEX CNDIR "proxy login."  Changes entries in
; both connected and login directory tables
; accepts in 1/36-bit directory number
;	     2/pointer to password
; returns +1 on failure, Tenex error code in AC1
; returns +2 on success
.cnpxy:	jsr .mentr		; save acs, stack
	setz 3,
	call .cnchk		; check password, directory name
	 call screwup##		; shouldn't happen
	movem 1,c.cnam		; save connected directory
	movem 1,c.unam		; save logged in directory
	call savcdn		; save connected directory name
	call savlgn		; save logged in directory name
	retgd			; leave good
; routine to check a password. Simulates TENEX CNDIR with B0 in AC1
; accepts 1/36-bit directory number
;	  2/pointer to password
; returns +1 if failure, Tenex error code in ac1
; returns +2 on success
.cnpsw:	jsr .mentr		; save stats
	setz 3,
	call .cnchk		; check password, dir #
	 call screwup##		; shouldn't happen
	retgd			; return good

; routine to check if connect is possible for this user
; called with 1/36-bit directory #
;	      2/pointer to password
;	      3/special bits:
;		B0 - Check group privileges and don't require
;		     password unless group priv insufficient
.cnchk:	call chkdir		;make sure directory exists
	 reterr (CNDIX3)	;return with bad directory #
	tlne 3,(1b0)		;check group?
	 call chkgrp		; yes
	  caia			; failed, check password
	 jrst .cnck1		; succeeded, leave good
	call chkpsw		;check password supplied
	 reterr (CNDIX1)	;return with bad password
.cnck1:	aos	0(p)
	ret
; routine to check for legal directory number
; accepts directory # in ac1
; returns +1 on failure, +2 on success
chkdir:	push p,2		; save password pointer
	move 2,1
	movei 1,.nulio
	dirst			; check dir # by DIRSTing to NUL:
	 jrst .chk1		; failed
	move 1,2		; success, restore acs
	pop p,2
	aos 0(p)
	ret

.chk1:	pop p,2			; failure, ret +1
	ret
; routine to check for sufficient privileges for connect
; does NOT consider enabledness as privilege
; accepts 1/36-bit directory number
; returns +1 on insufficient privileges for non-password connect
;	  +2 on password unnecessary
chkgrp:	push p,2		; save password pointer
	push p,3		; save 3
	movsi 2,(cd%dgp+cd%dpt)	; return directory groups and dir prot
	call getdir		; get the directory groups of dest dir
	push p,1		; set up to get user's user groups
	move 1,c.unam
	movsi 2,(cd%ugp)
	call getdir		; get user's user groups
	movei 1,usrugp+1	; point to user groups (skip count)
chkg00:	move 3,(1)
	movei 2,usrdgp+1	; point to dir grps (skip count)
	jumpe 3,chkg1		; if here, found none.  Leave
chkg0:	camn 3,(2)		;see if user group matches dir group
	 jrst chkg2		; found a match
	skipn (2)		; didn't, see if checked 0 in dir group
	 aoja 1,chkg00		; yes, get next user group
	aoja 2,chkg0		; wasn't 0, get next dir group

chkg1:	pop p,1
	pop p,3
	pop p,2
	ret			; leave bad

chkg2:	ldb 2,[point 6,usrdpt,29];get group protection of directory
	andi 2,dp%cn		; is connect on?
	caie 2,0		; any bits left?
	 aos -3(p)		; increment return and leave good
	jrst chkg1		; leave possibly bad
; routine to check for legal password
; accepts 1/36-bit directory number
;	  2/pointer to password
; returns +1 on illegal password, +2 on password OK
chkpsw:	push p,1
	push p,2
	call getpsw		; get password from directory
	hrroi 1,usrpsw		; pointer to directory's psw in 1
	stcmp			; compare strings
	cain 1,0		; must be exact match
	 aos -2(p)
	pop p,2
	pop p,1
	ret
	
; routine to get a directory's password
; returns password in USRPSW
; accepts 1/36-bit directory number
; returns +1 always
getpsw:	push p,2		; save password pointer
	movsi 2,(cd%psw)
	call getdir		; get directory info
	pop p,2
	ret
; routine to get directory data block
; accepts 1/36-bit directory number
;	  2/LH: GTDIR bits (from CRDIR JSYS)
; returns +1 always (or jumps to SCREWUP##)
;	     directory in USRDIR
;	     password, if requested, in USRPSW
;	     directory groups, if requested, in USRDGP
;	     user groups, if requested, in USRUGP
;	     default account, if requested, in USRACT
getdir:	push p,3
	hrri 2,usrdir
	hrri 3,gtdlen
	hrrzm 3,.cdlen(2)	; set data block length
	setz 3,	
	tlne 2,(cd%psw)		; want password?
	 move 3,[point 7,usrpsw]
	movem 3,.cdpsw(2)
	setz 3,
	tlne 2,(cd%ugp)		; want user groups?
	 movei 3,usrugp
	movem 3,.cdugp(2)
	setz 3,
	tlne 2,(cd%dgp)		; want directory groups?
	 movei 3,usrdgp
	movem 3,.cddgp(2)
	setz 3,
	tlne 2,(cd%dac)		; want default account?
	 move 3,[point 7,usract]
	movem 3,.cddac(2)
	gtdir
	 ercal screwup##
	tlne 2,(cd%dpt)		; was want directory protection on?
	 jrst  [move 3,.cddpt(2)	; put it in safe place
		movem 3,usrdpt
		jrst .+1]
	pop p,3
	ret
; routines to put connected and login directory names into strings
; both accept 1/36 bit directory number
; both return +1 always
cpycdn:	push p,2
	move 2,1
	hrroi 1,usrcdn
	dirst
	 call screwup##
	move 1,2
	pop p,2
	ret

cpylgn:	push p,2
	move 2,1
	hrroi 1,usrlgn
	dirst
	 call screwup##
	move 1,2
	pop p,2
	ret
; routine to simulate TENEX GDACC JSYS
; accepts 1/Address of 8 word string block in which to store
; 	    default account string
;	  2/36-bit directory number (-1 for self)
;returns +1 on failure, error code in AC1
;	 +2 successful
;GDACC ERROR MNEMONICS
GDACX2=601031			; No default account for this user

.GDACC:	jsr .mentr
	skipge 2		; given -1 for directory?
	 move 2,c.unam		; use what we think is login directory
	setzm usract		; clear out last account string
	push p,1		; save account string destination address
	move 1,2
	movsi 2,(cd%dac)
	call getdir		; get the account string
	skipn usract
	 reterr (GDACX2)	; nothing was put there, must be no default
	hrrz 1,0(p)		; transfer file to destination block
	hrli 1,usract
	blt 1,usrstl/5+1(1)
	retgd			; and leave
; routine to simulate TENEX CFGRP JSYS
; currently, no use for this exists in Tops20 implementation,
; so no code is written.
.cfgrp:	ret

ls usrpsw,usrstl/5+1		; user password
ls usrcdn,usrstl/5+1		; connected directory string
ls usrlgn,usrstl/5+1		; login directory string
ls usract,usrstl/5+1		; default account string
ls usrdpt			; directory protection of destination dir
gtdlen==20			; length of GTDIR data block
ls gtdblk,gtdlen		; GTDIR data block
ls usrugp,gtdlen		; user group list
ls usrdgp,gtdlen		; directory group list

	end

