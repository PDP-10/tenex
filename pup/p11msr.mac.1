	.title	hack PDP11- WITH HEATH-19 TTY - bare 11 support.

;	stack frame format
;
;	sp->	local variables
;		and temps
;		...
;	r5->	return pc
;		old r4 (arg ptr)
;		old r5
;

;	calling sequence
;
;		<code to store args in local frame>
;		jsr r5,routine
;		<offset of args in local frame>
;		<number of arguments>

	.globl	$main,start
	.globl  prolog
	.globl  epilog
	.globl  $nargs
r0=%0
r1=%1
r2=%2
r3=%3
r4=%4
r5=%5
sp=%6
pc=%7
	.macro	.exit
		halt
		br .-2
	.endm
	.sbttl	start up stuff...
boot=0					; =1 if we reboot from @#eboot on
					; trap to 4.
.IF NE <boot>
EBOOT=166224				; This must be current with PROM
.ENDC
psw = 177776
STACK = 1100				; USE 1100 FOR PUPSCH STUFF.
pri3 = 140				; run NON interrupt stuff at pri4
pri6 = 300				; for emulation entry.
ttouts = 177564
ttoutb = ttouts + 2
start:
	mov	#pri3,@#PSW		; set us to priority 3.
	mov	#STACK,sp		; set up stack pointer.
	mov	#0,-(sp)		; two dummies for return via epilog
	mov	#0,-(sp)

	jsr	pc,TRAPfx		; set up trap vectors.
	mov	@#PSW,r0		; save pri.
	mov	#340,@#PSW		; pri 7
	bic	#100,@#177546		; clock off
	bic	#100,@#ttouts		; turn off output interrupt
	mov	r0,@#PSW		; run at priority 4
	jsr	r5,$main		; start the program.
	0
	2
	.exit
	.sbttl	CC11 & CC11-05 function call stuff - entry and exit.
prolog:
	mov	r4,(sp)
	mov	sp,r4
	add	(r5)+,r4
	add	#4,r4
	tst	(r5)+
	mov	r5,-(sp)
	mov	sp,r5
	sub	(r0)+,sp
	mov	r0,pc

epilog:
	mov	r5,sp
	mov	(sp)+,r5
	mov	(sp)+,r4
	rts	r5

$nargs:
	mov	(sp),r0		; pointer to old frame
	mov	(r0),r0		; old old pc
	mov	-2(r0),r0	; old old nargs
	cmp	(r5)+,(r5)+	; skip past junk
	rts	r5		; return
;	put a string to TTY
;	Call is TTYOUT (s)   where we have char *s
;
	.globl	$TTYOUT
$TTYOUT:
	jsr	r0,prolog		; The beginning
	0
	mov	(r4),r0			; address of string.
1$:
	TSTB	@#ttouts		; done bit on?
	bge	1$			;  no, if branc, so wait...
	 tstb	(r0)			; NULL terminator?
	 beq	2$			; Yes
	  movb	(r0)+,@#ttoutb
	  br	1$			; Next char.
2$:
	jmp	epilog
	.sbttl	TRAP vector stuff
t4  = 000004
t10 = 000010
t24 = 000024	; power fail.
t34 = 000034
TRAPfx:
	MOV	#TR04,@#t4
	MOV	#TR10,@#t10
	MOV	#start,@#t24			; restart on power failure
	MOV	#TRAP34,@#t34			; for now, emulator later.
	MOV	#pri6,@#t34+2
	rts	pc
TR04:
.IF EQ <boot>
	jsr	PC,REGsav
	halt
	4
.ENDC
.IF NE <boot>
	jmp	@#EBOOT				; reboot on NET.
.ENDC
TR10:
.IF EQ <boot>
	jsr	PC,REGsav
	halt
	10
.ENDC
.IF NE <boot>
	jmp	@#EBOOT			; boot ourselves.
.ENDC
.IF EQ <boot>
REGsav:
;	stack is as follows
;	(SP)	oldPC from call to here
;      2(SP)	PC at trap
;      4(SP)	PSW from trap
;      6(SP)    stack when trap happened
	mov	R0,$REGS
	mov	R1,$REGS+2
	mov	R2,$REGS+4
	mov	R3,$REGS+6
	mov	R4,$REGS+10
	mov	R5,$REGS+12
	mov	SP,$REGS+14
	add	#6,$REGS+14		; (SP) + 6
	mov	2(SP),$REGS+16		; PC
	mov	4(SP),$PSW		; PSW...
	rts	PC
	.globl  $REGS,$PSW
$REGS:	.BLKW	8.
$PSW:	.WORD   0
.ENDC
	.sbttl	software MUL DIV MOD  for archaic machines - nothing fancy.
TRAP34:
;	Run as same priority as from where we trapped
	mov	2(sp),@#psw		; pri7 ==> priX
	mov	(sp),-(sp)		; return pc (addr of trap ins. + 2)
	sub	#2,(sp)			; now addr of trap ins.
	movb	@(sp),(sp)		; 0, 2, or 4 (MUL, DIV, or MOD)
	bic	#177400,(sp)		; clear high order bits.
	add	#Opcode,(sp)		; base + offset 
	jmp	@(sp)+			; so, do it.
Opcode:
	br	MUL
	br	DIV
	br	MOD
	.sbttl	MUL emulation
MUL:
;	check for sign
	clr	-(sp)			; 0 for plus
	tst	r0
	bge	1$			
	 inc	(sp)			; 1 minus
	 neg	r0			; +
1$:
	tst	r1		
	bge	2$
	 inc	(sp)			; 1 minus, 2  plus
	 neg	r1
2$:
	mov	r0,-(sp)		; loop counter
	cmp	r0,r1			; use smallest
	ble	3$			; r0 =< r1
	 mov	r1,(sp)			;  use r1
	 mov	r0,r1			;  and accum. r0.
3$:
	clr	r0			; for return.
4$:	
;	Add and shift....algorithm.
	tst	(sp)			; are we done?
	beq	6$			; yes
	 bit	#1,(sp)			; bit 0 on?
	 beq	5$			; No, just shift
	  add	r1,r0			; accumulate
5$:
	 asr	(sp)			; next binary place, multiplier.
	 asl	r1			; next binary place, multiplicand.
	 br	4$			; and, continue...
6$:
	tst	(sp)+			; clear stack.
;	see if negative
	bit	#1,(sp)+		; test and clear stack
	beq	7$			; + on EVEN
	 neg	r0			; 2's compliment.
7$:
	RTI
	.sbttl	DIV emulation
DIV:
	jsr	pc,DOdiv
	mov	r1,r0		; get quotient into return register.
	RTI

	.sbttl	MOD emulation
MOD:
	jsr	pc,DOdiv	; do divide, get remainder in r0
	RTI
	.sbttl	the divide routine - binary aritmetic.
DOdiv:
;	Do r0/r1	return quotient in R1, remainder in r0
;	Check sign
	clr	-(sp)		; for sign change.
	tst	r1		; 
	beq	DIVext		; Do nothing for 0 divide
	bgt	1$		; +
	 inc	(sp)		;  1 means neg quotient
	 neg	r1		;
1$:
	clr	-(sp)		; for quotient
	tst	r0		; 
	beq	6$		; 0 quotient
	bgt	2$
	 inc   2(sp)		; 1 for -, 2 for -- = +
	 neg	r0
2$:
	cmp	r0,r1		; r0 < r1, then r0 = 0*r1 + r0.
	blt	6$		; Yes, so nothing to do.

;	Division by 1?
	cmp	#1,r1		; 
	bne	20$		; NOT that trivial
	 mov	r0,(sp)		; r0 = r0*r1 + 0
	 clr	r0		; remainder
	 br	6$		; Won't waste our time!
20$:
;	Now align Most Significant Bit in R1 with MSB R0.
	mov	r1,-(sp)	; save original R1.
	mov	#1,-(sp)	; for bit setting quotient.
	mov	#40000,-(sp)	; mask
21$:
	bit	(sp),r0		; this the one?
	bne	22$		; Yes
	 asr	(sp)		; try again
	 br	21$
22$:
	bit	(sp),r1		; MSB? 
	bne	23$		; Yes, they're aligned.
	 asl	r1		; shift left divisor.
	 asl	2(sp)		; shift bitsetter.
	 br	22$
23$:
	tst	(sp)+		; clear mask
				; (sp) = shifter, 2(sp) = org r1, 4(sp) = q
;	They are now aligned
;	Let's go!
30$:
	cmp	r1,r0		; Can We subtract?
	ble	31$		; Yes.
	 asr	r1		;  Not yet.
	 asr	(sp)		;  one place right.
	 br 	30$	
31$:
;	Subtract away until r0 < original r1 = (sp).  Quotient 2(sp).
	bis	(sp),4(sp)	; set bit in quotient.
	sub	r1,r0		; r0 - r1
	cmp	r0,2(sp)	; r0 < original r1?
	blt	5$		; Yes.
	 br	30$		;  try again.
5$:
;	Done, so clean up and xit.
	tst	(sp)+		; clear shifter
	tst	(sp)+		; clear original r1 from stack.
6$:
;	set up quotient and remainder
	mov	(sp)+,r1	; r1 quotient, remainder in r0.
DIVext:
	bit	#1,(sp)+	; check for < (odd)
	beq	1$
	 neg	r1		; < 0
1$:
	rts	pc
	.end	start

