				     SUNUI
		  Stanford University Network User Interface

				  A Proposal

				  V. R. Pratt
				  Nov., 1980

This proposal sketches a user interface for the SUN system.  The two design
goals are abstractness and orthogonality.

Abstractness:  The user is insulated from the detailed operation of the system
as far as possible.  This reduces opportunity for user error, and hopefully
increases throughput.  The interface should create the illusion of unbounded
system resources.

Orthogonality:  Each function provided by the interface combines with other
functions wherever this makes sense logically.  In this way much functional
duplication is avoided and the design is simplified accordingly.

In order to achieve these two goals we shall modify some traditional operating
system structures, most notably the file system and the usual separation of the
three languages, editing, programming, and monitor.  We will drop the
distinction between a file and a datum.  The usual file directory will be
absorbed into the lexicon of the programming language.  The editor will become
the monitor, and all commands, whether programming, monitor, mailer, or what,
will be issued from the editor.  The end product will hopefully be a coherent
and rational interface that is easier both to implement and to learn.

Philosophy

The user is viewed as a sculptor of data structures, with the keyboard and any
pointing devices serving as his tools and the display as his window(s) on his
world.  Thus the interface serves the function of an editor, not just of text
strings but of more general data structures.

The interface also offers the power of an interactive programming language cum
system command language.  This is achieved via one of the editing commands,
INTERPRET (one key-stroke or button-push).  This command sends an expression, a
sequence of symbols (lexical tokens) denoting a value or action, to an
expression interpreter.  Here are some typical expressions.  Each is followed
by its effect, which will either be the insertion after the expression of a
simplified form of the expression, or the effect of a requested action.

1201+321*53
18214

1..10
[1,2,3,4,5,6,7,8,9,10]

cat("Mr. ", owner(auto3))
"Mr. Robinson"

bmsg := "Mr. Robinson"
... the symbol bmsg is added to the lexicon if necessary and assigned the value
"Mr. Robinson".  In typing this command it would suffice for the user to insert
"bmsg := " ahead of the string "Mr. Robinson" that was inserted a moment ago.

boyer@sri@arpa := bmsg
... the message "Mr. Robinson" is sent to Bob Boyer, whose address is SRI on
the Arpa net.  This message will be encapsulated and decapsulated by the
appropriate mail and lower protocols.  Note that bmsg played no important role
here; we could as well have typed "boyer@sri@arpa := " in front of the the
original "Mr. Robinson".  Messages may be any data objects; they will be
encoded as strings by the mail protocol, and decoded as data at the other end
provided the protocol is supported at that end.

delete bmsg
...the symbol bmsg is deleted from the lexicon.  This is the equivalent of
deleting a directory entry.  The symbol and its value are appended to the
history of old symbol-value pairs associated with this lexicon.

raise@blocks b3
...the operation named "raise" in the lexicon whose name is "blocks" in the
user's lexicon is performed on b3 (whatever that means).  The mechanism that
treats "raise" as meaningful in the blocks lexicon is the same as the one that
treats "boyer" as meaningful in the sri lexicon and "sri" as meaningful in the
arpa lexicon.

add *@blocks
...the symbols of the blocks lexicon are added to the user's lexicon.  Name
conflicts are resolved in favor of old names; such conflicts are reported in
the user's status window.

lower b3
..."lower" is a symbol in the blocks lexicon which is now in the user's lexicon
thanks to the "add *@blocks" and so can be used without the "@blocks".

delete *@blocks
...All lexical entries added from the blocks lexicon are deleted from the
user's lexicon.  The user must now revert to saying "lower@blocks".

delete blocks
...The symbol "blocks" is deleted from the user's lexicon.  Now the user cannot
even refer to "lower@blocks".

Concepts

Associated with this approach is a set of concepts, namely state, symbol,
expression, lexicon, datum, history, editor, and view.  The meanings of these
concepts are as follows.

State:  How the user's world appears to the user.  This world changes in
response to stimuli from the user, the world itself, and other users.  State is
not changed in response to the user detaching and reattaching (i.e. logging off
and on again), though between detaching and reattaching it may change in
response to other stimuli, just as though the user had not detached.

Symbol:  A symbol is a string of characters, either all alphanumerics (case not
significant) or all printing glyphs (e.g. + < <= := etc.)  In the former case
all strings of alphanumerics form symbols whether or not those symbols are in
the lexicon.  In the latter case any sequence of contiguous glyphs is
considered to form one symbol per glyph unless the sequence appears explicitly
in the lexicon or the sequence is in string quotes as in ":=:".

Expression:  An expression is a symbol surrounded by (possibly delimited)
expressions.  Thus "1+2" is the symbol "+" preceded by the expression "1" and
followed by the expression "2".  "if a then b else c" is the symbol "if"
followed by the expression "a" and the delimited expressions "then b" and "else
c".  "(a)" is the symbol "(" followed by the expression "a" and the delimiter
")".  Associativity is dealt with by numeric precedence functions.

Lexicon:  The lexicon supplies the meanings of the symbols that may appear in
the user's expressions.  It supplies the reserved words of the programming
language, the equivalent of monitor commands, and the names of files.  Not
every symbol that is meaningful to a lexicon will be listed explicitly; some
symbols will be listed generically, such as "number" (any string of digits), or
in the case of a lexicon such as sri, "name" (any string of alphanumerics).

Datum:  The meanings of symbols are data, as are the objects that the user
views on the screen.  Data may be integers, reals, characters, strings, lists,
arrays, structures, functions, procedures, etc.  They supply the operands and
operations of the programming language, and the contents of files.  In the
traditional approach a file called say ACCT is a string of characters.  In this
approach ACCT is a lexical entry whose meaning or value is a datum possibly
consisting of a string, or just as likely some other data structure more suited
to the actual use of that "file".

History:  When a symbol is deleted or reassigned to, the symbol and its value
go down in history.  "History" is a symbol in the lexicon whose value is a list
of old symbol-value pairs.

Editor:  The editor is the most "immediate" part of the interface.  It permits
the user to navigate around data, and to insert, delete, and modify
constituents of data.

View:  The form in which data is presented either on the display or on other
devices such as printers or plotters is at all times under the control of the
user, or of user programs.  "Raw" is a form which uniquely determines the
datum; two distinct data must look distinct in their raw form.  "Formatted" is
a form in which part of the datum is "consumed" in the process of presenting
the rest of the datum.  Most graphical data will be viewed formatted, as will
much textual data.  Any view possible on hardcopy devices will be approximable
on the display to within limitations of resolution.

Access:  Read, modify, and append capabilities are granted independently for
each datum.  Lexicons may be read by anyone but modified only by their
owner (which may be an individual or a group).

Implementation

How the above is implemented is intended to be invisible to the user, except in
matters of latency and throughput.  A memory hierarchy is assumed, and
conventional page-replacement strategies would presumably be used to prescribe
how older files migrated towards archival storage.  An interesting question
arises as to whether histories should be archived faster than live data.
Intuition suggests that they should, but in this case intuition may turn out
not to be very reliable.

Asynchronous Dialog

It is common for interfaces to ask questions, such as "what is your password?"
or "please confirm deleting this file".  These questions are "synchronous" in
the sense that nothing more can happen until the user has answered the
question; furthermore the answer must be given in the language assumed by the
question, which in practice tends to vary from question to question.  Such
questions interfere with the smooth use of the system, particularly when the
user is typing ahead.  They also often prevent the user from using the computer
to help in determining the answer.  We recommend adoption of the "asynchronous
dialog" protocol.  In this protocol all information that may be called
for is assumed to be suppliable spontaneously by the user with no prompting. 
When the system needs information or authentication, or wants to warn of some
unusual condition, it should do its best to attract the user's attention
without otherwise interfering with the user.  The user responds when ready.

One role for synchronous questions is in protecting the user from accidental
irreversible operations ("do you really want to delete this file?").  This is
not an effective way to protect users, whose reflexes tend to be faster than
their minds.  A better way of protecting the user is not to have irreversible
operations.  This is the purpose of histories, which make information-deleting
operations pretty reversible.  Information-increasing operations (assignments,
e.g. when sending mail) are harder to reverse; perhaps assignments should have
some built-in delay in critical cases to permit users to take back information
they did not want to divulge.

       