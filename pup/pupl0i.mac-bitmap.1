	.title	  Interrupt Service routines - ETHER NET
	.sbttl    Ether-Net interrupt routines.
	.sbttl	  $E0$I0init - initialization for NEt 0
	.globl	prolog,epilog			; CC11 interface stuff.
	.globl	$l0$ra				; RAW input queue.
	.globl	$q$set				; sets intent in socket
	.globl	$p$enq				; enqueue routine
	.globl	$l0$dis				; discard queue for output.
	.globl	$e$0NDB				; addresses of associated
					        ; NDBs for Net 0, and 1
						; Set up in pupl1e.c
	.globl	$E0$I0init
	.globl	$l0$Ie,$l0$Oe,$l0$CX		; Error counters
	.globl	$l0$TP,$l0$LP
NET1 = 1
.IF NE <NET1>
	.globl	$e$1NDB				; Net 1
	.globl	$E1$I0init			; Net 1
	.globl	$l1$Ie,$l1$Oe,$l1$CX		; Error counters
	.globl	$l1$TP,$l1$LP
.ENDC
	.sbttl vector and register assignments - 
;  NET 0 - set up for our 11/05 board right now.
pri5 = 240
MaxPUP = 280.					; includes 2 Encap. words.
						; Note Max PAK is 279 words,
						; but word count->0 is
						; an input overflow for
						; the interface.

E0OCV = 400					; Output complete vector
E0ICV = E0OCV+4					; Input  complete vector
E0OEV = E0OCV+10				; Output ERROR vector
E0OWC = 160000					; output word count
E0OBL = E0OWC+2					; output buffer location
E0OCS = E0OWC+4					; output control and status
E0ODE = E0OWC+6					; output delay.
E0IWC = E0OWC+10				; input word count
E0IBL = E0OWC+12				; input buffer location
E0ICS = E0OWC+14				; input control and status
E0RHA = E0OWC+16				; read HOST address.

; NET 1 - for defining a second NET, set NET1 = 1
.IF NE <NET1>
E1OCV = 500					; Output complete vector
E1ICV = E1OCV+4					; Input  complete vector
E1OEV = E1OCV+10				; Output ERROR vector
E1OWC = 160020					; output word count
E1OBL = E1OWC+2					; output buffer location
E1OCS = E1OWC+4					; output control and status
E1ODE = E1OWC+6
E1IWC = E1OWC+10				; input word count
E1IBL = E1OWC+12				; input buffer location
E1ICS = E1OWC+14				; input control and status
E1RHA = E1OWC+16				; read HOST address.
.ENDC

; NDB definitions  -  see PUPL11.H
sinput = 10.					; offsets in bytes.
sOutput = 12.
Icount = 16.
ICstat = 20.
pakIN  = 22.
OCstat = 28.
OCload = 30.
Ncolli = 32.
pakOUT = 38.
ETHOCS = 48.
ETHIWC = 52.
ETHICS = 56.
BitMap = 62.

; packet definitions
input  = 2.					; Flags input packet.
Ocomplete = 8.
keepPUP = 32.
Opending  = 128.
PUP    = 1000					; Type PUP.
OnRawQ = 1000					; flags for input trace.
; some useful offsets - in bytes for PUP Data BLOCK.
NDBptr = 4.					; Net Data BLOCK
intent = 6.					; intent discriptor.
PAKlen = 8.
ENCAP1 = 10.
ENCAP2 = 12.
PUPlen = 14.
HiTim=568.					; packet offset for time tag.
lowTim=570.

; local data here
$l0$Ier: 0					; error counters I/O Net0
$l0$CX: 0
$l0$TP: 0					; These two used for input
$l0$LP: 0					; counters
.IF NE <NET1>
$l1$Ie: 0					; error stuff I/O Net1
$l1$CX: 0
$l1$TP: 0
$l1$LP: 0
.ENDC
;	NEW data area: save counts of input errors vrs source host.
Dend= -1			;	Used in PUPMSR for end of table.
$l0$Oe: .rept 256.		; 	Hosts 0-377
	.word 0
	.endr

	.word Dend		;	terminator
.IF NE <NET1>
$l1$Oe: .rept 256.
	.word	0
	.endr

	.word Dend		;	terminator
.ENDC
; New data area Sep. 17, 81. For histogramming thru put time tics.
	.globl $l0$H0,$l0$H1,$l0$H2,$l0$H3,$l0$H4,$l0$H5
	.globl $TODCLK,$TODLOW
$l0$H0: 0
$l0$H1: 0

$l0$H2: 0
$l0$H3: 0

$l0$H4: 0
$l0$H5: 0
	.sbttl	ether initialization routines
$E0$I0init:
; do initialization of Ether interface, and return local host in r0
	jsr	r0,prolog
	0
;	reset interface

	clr	@#E0ICS				; reset input 
	clr	@#E0OCS				; reset output
	bis	#100,@#E0ICS			; interrupt on
	bis	#100,@#E0OCS			;       "

;	set vectors
	mov	#ICnet0,@#E0ICV			; input vector
	mov	#pri5,@#E0ICV+2			; priority 5

	mov	#OCnet0,@#E0OCV			; output vector
	mov	#pri5,@#E0OCV+2			; priority 5

	mov	#OEnet0,@#E0OEV			; output ERROR vector
	mov	#pri5,@#E0OEV+2			; priority 5

;	clear error counters
	CLR	$l0$Ie
	CLR	$l0$LP
	CLR	$l0$CX
	CLR	$l0$TP
	CLR	$l0$LP

;	Note: IN C r4 is free since it is used to point to parameters,
;	and restored on exit in epilog...
	mov	#$l0$Oe,r4			; host table
	mov	#256.,r0
1$:
	clr	(r4)+
	dec	r0
	bgt	1$

;	return HOST number
	mov	@#E0RHA,r0			; -1s host number
	comb	r0				; 1s complement
	jmp	epilog
	.sbttl	  $E1$I0init - initialization for NET 1
.IF NE <NET1>
$E1$I0init:
; do initialization of Ether interface, and return local host in r0
	jsr	r0,prolog
	0
;	reset interface

	clr	@#E1ICS				; reset input 
	clr	@#E1OCS				; reset output
	bis	#100,@#E1ICS			; interrupt on
	bis	#100,@#E1OCS			;       "

;	set vectors
	mov	#ICnet1,@#E1ICV			; input vector
	mov	#pri5,@#E1ICV+2			; priority 5

	mov	#OCnet1,@#E1OCV			; output vector
	mov	#pri5,@#E1OCV+2			; priority 5

	mov	#OEnet1,@#E1OEV			; output ERROR vector
	mov	#pri5,@#E1OEV+2			; priority 5

;	clear error counters
	CLR	$l1$Ie
	CLR	$l1$LP
	CLR	$l1$CX
	CLR	$l1$TP

	mov	#$l1$Oe,r4			; host error table.
	mov	#256.,r0
1$:
	clr	(r4)+
	dec	r0
	bgt	1$

;	return HOST number
	mov	@#E1RHA,r0			; 1s comp-host number
	comb	r0				; 1s complement
	jmp	epilog
.ENDC
	.sbttl	input complete interrupt service

;	NOTE: all INTERRUPT routines MUST save r0, r4, r5 AND
;	      any other LOCALLY used registers.
;	      On procedure calls CC11 will protect r4, and r5, ALL
;	      other registers are fair game.
ICnet0:
	mov	r2,-(SP)
	mov	r3,-(SP)
	mov	r4,-(SP)
	mov	r0,-(SP)

;	load address of associated network data block.
	mov	$e$0NDB,r4
;	And input error counter
	mov	#$l0$Oe,r0		; host table pointer.
	mov	#$l0$Ie,r2		; input error counter
	mov	#$l0$LP,r3		; 2nd word of INPUT PAK count.
	br	Istart
.IF NE <NET1>
ICnet1:
;	save r2, r3, r4
	mov	r2,-(SP)
	mov	r3,-(SP)
	mov	r4,-(SP)
	mov	r0,-(SP)		; NEW save here for ier host check.
;	load address of associated network data block.
	mov	$e$1NDB,r4

;	And input error counter
	mov	#$l1$Oe,r0
	mov	#$l1$Ie,r2
	mov	#$l1$LP,r3
	br	Istart
.ENDC
Istart:
	mov	r1,-(SP)
	mov	r5,-(SP)

;	See if there WAS indeed an input PACKET - could be bad interrupt
	MOV	ETHICS(r4),r5			; ICS address for NET
	MOV	(R5),ICstat(r4)			; save in NDB.
	MOV	pakIN(r4),R1			; Pointer to input Packet.
	BEQ	Ierr				; BAD interrupt, restart

;	Through put counting:
	inc	(r3)
	bge	1$				; keep up to 32767
	 clr	(r3)				;  wrap around
	 inc	-(r3)				;  multiples of 32767.
1$:
;	Flag as input
	MOV	#input,intent(r1)		; flag as input buffer.
	TST	ICstat(r4)			; errored PUP?
	BGE	2$				; NO, so continue on...
	 movb	ENCAP1(r1),r3			; source host for this error
	 bic	#177400,r3			; zap any extension...

;	 See if in bit map ...
;	 16 word map. High order 4 bits of host yield map word:
	 mov	BitMap(r4),r5			; bit map pointer
	 mov	#1,-(Sp)			; our bit mask
	 mov	r3,-(Sp)			; save copy of r3
	 asr	r3				; shift off low 4 bits
	 asr	r3
	 asr	r3
	 asr	r3
	 asl	r3				; Now byte index into map.
	 add	r3,r5				; address of map word.
	 mov	(Sp),r3				; r3 back-stack still saves.
;	 Now use LOW order 4 bits to determine bit mask:
	 bic	#177760,r3			; lower 4 bits only

;	 Now LEFT shift the 1 bit into place
17$:	 
	 tst	r3				; done shifting if 0
	 beq	18$
	  asl	2(Sp)				; shift our mask bit.
	  dec	r3				; one less time
	  br	17$
18$:
	 mov	(Sp)+,r3			; get orignal r3 back
	 bit	(Sp)+,(r5)			; bit on if we know the host
	 beq	Ierr				; NOT known to us. Reject.
	  asl	r3				; for table index
	  add	r3,r0				; base + offset
	  inc	(r0)
	  bge	Ierr
	   clr	(r0)				; wraps at 32767.
	   br	Ierr
2$:						; the SAME input buffer.
; :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;
;	NO hardware errors - so process input data:
;
; :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	Validate TYPE PUP
	CMP	ENCAP2(r1),#PUP			; type PUP?
	BNE	Ierr				; NOT a PUP!

;	Compute length of input packet
	MOV	ETHIWC(r4),r5			; pointer to word count
	MOV	(r5),Icount(r4)			; save in NDB ( < 0 )
	BIS	#176000,Icount(r4)		; 10 bits - extend sign.
	MOV	#MaxPUP,PAKlen(r1)		; Max. size PUP.
	ADD	Icount(r4),PAKlen(r1)		; N words INPUT.

; 	Validate Length of PUP
	MOV	PUPlen(r1),r5			; length in bytes.
	ADD	#5,r5				; 4 for ENCAP, 1 for odd
	ASR	r5				; Now in words.
	CMP	r5,PAKlen(r1)			; good length?
	BNE	Ierr				; NO, restart.

;	Assign arrival NDB for routing.
	MOV	r4,NDBptr(r1)

;	Time tag for through put timing stats:
	mov	$TODLOW,lowTim(r1)		; save low order FIRST
	mov	$TODCLK,HiTim(r1)		; in case interrupted.

;	Queue on Raw INPUT Queue - NOTE: push params in REVERSE order.
	BIS	#OnRawQ,intent(r1)		; into raw input Q.(trace)
	MOV	r1,-(SP)			; packet pointer
	MOV	$l0$raw,-(SP)			; queue pointer.
	JSR	R5,$p$enq			; enqueue packet
	0					; 0 local frame
	2					; 2 parameters
	tst	(SP)+				; clear params 
	tst	(SP)+				; 
	CLR	pakIN(r4)			; Need NEW input buffer
	br	Ires
Ierr:
	INC	(R2)				; up error counter
	BGE	1$				; 15 bits only.
	 CLR	(R2)
1$:
	MOV	ETHICS(r4),r5			; ICS address for NET
	MOV	#100,(R5)			; reset input-leave int bit.
Ires:
;	start ether input up 
	MOV	r4,-(SP)			; NDB pointer
	JSR	r5,@sinput(r4)			; start ether input.
	0
	1
	tst	(SP)+				; clear parameter.

;	restore registers
	MOV	(SP)+,r5			; restore registers.
	MOV	(SP)+,r1
	MOV	(SP)+,r0
	MOV	(SP)+,r4
	MOV	(SP)+,r3
	MOV	(SP)+,r2
	RTI
	.sbttl	output SUCCESSFULLY complete interrupt service.
OCnet0:
	MOV	r4,-(SP)
	MOV	$e$0NDB,r4
	br	Ostart
.IF NE <NET1>
OCnet1:
	MOV	r4,-(SP)
	MOV	$e$1NDB,r4
	br	Ostart
.ENDC
Ostart:
	MOV	r0,-(SP)
	MOV	r1,-(SP)
	MOV	r2,-(SP)
	MOV	r3,-(SP)
	MOV	r5,-(SP)

;	save status
	MOV	ETHOCS(r4),r5			; pointer to OCS reg.
	MOV	(r5),OCstat(r4)			; save status in NDB
	BLT	Oerr0				; output error.
						; This can change in
						; different implimentations.
;	check for spurious interrupt
	MOV	pakOUT(r4),r1			; pointer to packet
	BEQ	Oerr1				; 0, so restart.
	 jsr	pc,fixOUT			;  success, fix up &Toss pak.
						;  fixOUT uses r0.
	 br	Ores
Oerr0: 
	TST	pakOUT(r4)			; will we go again NOW?
	BNE	Ores				; YES, something to send.
Oerr1:
	mov	#100,(r5)			; set interrupt to clear
						; error bit..May NOT immedi-
						; ately GO.
Ores:
;	restart output.
	MOV	r4,-(SP)			; NDB address
	jsr	r5,@sOutput(r4)			; start output
	0
	1
	TST	(SP)+				; clear parameter
	
;	restore registers
	MOV	(SP)+,r5
	MOV	(SP)+,r3
	MOV	(SP)+,r2
	MOV	(SP)+,r1
	MOV	(SP)+,r0
	MOV	(SP)+,r4
	RTI
	.sbttl	output ERRORED interrupt service (collision!!).
OEnet0:
	MOV	r2,-(SP)
	MOV	r4,-(SP)
	MOV	$e$0NDB,r4			; NDB address
	MOV	#$l0$CX,r2
	br	OEbeg
.IF NE <NET1>
OEnet1:
	MOV	r2,-(SP)
	MOV	r4,-(SP)
	MOV	$e$1NDB,r4			; NDB address
	MOV	#$l1$CX,r2
	br	OEbeg
.ENDC
OEbeg:
	MOV	r0,-(SP)
	MOV	r1,-(SP)
	MOV	r3,-(SP)
	MOV	r5,-(SP)

;	Save OCS
	MOV	ETHOCS(r4),r5			; ptr to status
	MOV	(r5),OCstat(r4)			; saved in NDB.

;	See if we were really outputing...
	MOV	pakOUT(r4),r1			; pointer to packet.
	BEQ	OEclr				; bad interrupt?? try again.
	 INC	(R2)
	 INC	nColli(r4)			; Up the collision counter
	 BGT	1$				; 15 bits only.
	  CLR	(R2)
	  CLR   nColli(r4)
1$:
	 TST	OCload(r4)			; had 16 retries?
	 BGE	OEres				; NO, so try again.
	  JSR	pc,fNOTin			;  fix intent flag. Toss pak.
						;  fNOTin uses r0.
OEclr:
	 MOV	#100,(r5)			; turn on interrupt to clear
						; error, since we may NOT
						; GO immediately.
OEres:
	MOV	r4,-(SP)			; NDB
	jsr	r5,@soutput(r4)			; start output
	0
	1
	TST	(SP)+				; clear parameter.

	MOV	(SP)+,r5
	MOV	(SP)+,r3
	MOV	(SP)+,r1
	MOV	(SP)+,r0
	MOV	(SP)+,r4
	MOV	(SP)+,r2
	RTI
	.sbttl	fix up packet intent flag - discard if necessary
;	Here r1 has address of packet just output.
;	     r4 the NDB pointer.
fixOUT:
;	see how long this packet in queue if WAS INPUT:
	bit	#input,intent(r1)
	beq	fNotIN
	 mov	$TODLOW,r0			; low order time
	 sub	lowTim(r1),r0			; only need low order diffs.
	 tst	r0				; determine table offset
	 bge	1$				; Keep in limits 0 to 2.
	  clr	r0				; If < 0, fix the screwup!
1$:
;	 r0 GE 0 here.
	 cmp	r0,#2				; < 2?
	 ble	2$				; Yes on ble.
	  mov	#2,r0				; was > 2, Now 2.
2$:
	 asl	r0				; (0,1,2) x 2 = (0,2,4)
	 asl	r0				; (0,2,4) x 2 = (0,4,8)
3$:
	 add	#$l0$H0,r0			; Points to high order word.
	 inc	2(r0)				; low order counter,
	 bge	fNotIN				; <0 is cleared
	  clr	2(r0)				;  MOD 32768
	  inc	(r0)				;  N*32767 + M
fNotIN:
;	output complete - set intent to show output complete.
	bic	#Opending,intent(r1)		; clear pending
	bis	#Ocomplete,intent(r1)		; set complete

;	now, set tag in socket.
	MOV	intent(r1),-(SP)		; current intent
	MOV	r1,-(SP)			; PAK ptr.
	jsr	r5,$q$set			; set tag in socket.
	0
	2
	MOV	(SP)+,r1			; R1 back
	TST	(SP)+				; clear other parameter

;	If NOT keepPUP, then enqueue in $l0$dis
	bit	#keepPUP,intent(r1)		; keep it when done?
	bne	fixRet				; Yes...
	 MOV	R1,-(SP)			; packet address
	 MOV	$l0$dis,-(SP)			; ptr to discard Q.
	 jsr	R5,$p$enq			; enqueue Packet.
	 0
	 2
	 TST	(SP)+				; clear parameters
	 MOV	(SP)+,R1			
fixRET:	 
	CLR	pakOUT(r4)			; clear ptr in NDB
	CLR	OCload(r4)			; reset retry counter.
	rts	pc
	.END

