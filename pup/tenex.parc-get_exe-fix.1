
;GET AND SAVE ROUTINES

;AC USAGE IN GET ROUTINE:
; 4 - PAGE NUMBER IN USER SPACE CURRENTLY MAPPED TO FTPG1
; 5 - POINTER TO ADDRESS IN FTPG1 CORRESPONDING TO AC 6
; 6 - AOBJN (NOT IOWD) POINTER TO USER SPACE WHERE CURRENTLY READING
;14 - SETPT ARGUMENT FOR FTPG1
;15 - FORK HANDLE BEING GET'ED INTO
;16 - JFN BEING READ FROM

.GET:	JSYS MENTR
	CALL GTSVI		;CHECK PARAMETERS, ETC.
	HRRI 2,1B19		;READ BIT
	TLNN 3,777		;DISK?
	HRRI 2,5B21+1B25	;YES, REQUEST RD,XCT ACCESS AND THAWED
	PUSH P,2		;SAVE THE DESIRED OPENING BITS
	GTSTS			;SEE IF THE FILE IS OPEN ALREADY
	TLNN 2,(1B0)		; ..
	JRST GET2A		;NO. GO OPEN IT.
	TLNE 3,777		;IT'S OPEN. IS IT A DISK?
	JRST GET2B		;NO. ASSUME HE OPENED IT RIGHT
	TLC 2,(1B0+1B1+1B3)	;SEE IF RD & XCT BOTH ON
	TLNE 2,(1B0+1B1+1B3)	; ..
	JRST GETE2		;NO.
GET2B:	RFBSZ			;AND CORRECT BYTE SIZE?
	CAIE 2,44		; ..
	JRST GETE2		;NO
	POP P,2			;OK. CLEAR STACK
	JRST GET2C		;AND GO READ THE OPEN FILE.

GET2A:	POP P,2			;RETRIEVE OPENING MODE BITS
	OPENF			;OPEN FILE FOR INPUT
	JRST ITRAP1		;WON'T OPEN
GET2C:	MOVEI 1,FTPG1A
	CALL FPTA		;GET HANDLE OF TEMP PAGE FOR LATER
	MOVE 14,1
;FALL THRU

;FALLS THRU
GET2:	TSTINT			;INTERRUPT PENDING?
	CALL GETINT		;YES, GO ALLOW IT
	MOVEI 1,0(16)		;JFN
	BIN			;GET IOWD COUNT,ADR
	JUMPE 2,[GTSTS		;ZERO. PROBABLY EOF.
		TLNE 2,(1B8)	;IS IT?
		JRST GETE1	;YES. TRUNCATED FILE.
		MOVEI 2,0	;NO, A ZERO ENTRY VECTOR.
		JRST .+1]	;HANDLE IT
	MOVE 6,2
	HLRZ 2,2
	cain 2,1776		;[SRI] TOPS20 style save format?
	 jrst getexe		;[SRI] Yes
	CAIL 2,1000		;LEFT HALF IMPLYING SSAVE?
	CAIL 2,10000
	JRST .+2		; NO
	JRST SGET		; YES.
	JUMPGE 6,GET1		;POSITIVE MEANS END
	ADDI 6,1		; CHANGE IOWD TO AOBJN POINTER
GET5:	CALL GET3		;SET MAP FOR THIS PAGE, SET AC 5
	MOVEI 2,0(6)		;ADDRESS IN USER SPACE
	ORCMI 2,777		;MINUS NUMBER OF WORDS IN THAT PAGE
	HLRE 3,6		;LENGTH OF THE IOWD
	CAMLE 2,3		;WILL IT FIT IN THE WINDOW PAGE?
	MOVE 3,2		;NO. JUST READ WHAT WILL FIT
	MOVM 2,3		;POSITIVE FOR UPDATING POINTERS
	HRL 2,2			;IN BOTH HALVES. THIS IS +N,,+N
	ADD 6,2			;UPDATE THE AOBJN WORD. MAY OR MAY NOT GO +
	MOVE 2,5		;ADDRESS IN WINDOW PAGE
	HRLI 2,444400		;BYTE POINTER TO IT.
	SUB 5,3			;3 IS ALREADY -N FOR SIN. COUNT WINDOW ADDR.
	SIN			;NOW READ INTO THE WINDOW
	JUMPL 6,GET5		;JUMP IF POINTER CROSSED PAGE BOUNDARY
	JRST GET2		;DONE THIS POINTER. READ NEXT ONE.

GET1:	MOVEI 1,0(15)		;FORK HANDLE
	CALL SETLFK		;MAP PSB
	MOVEM 6,ENTVEC(1)	;STORE ENTRY VECTOR DATA
	MOVEI 1,0(16)		;JFN
	JRST SAVER

SGET:	CAIE 2,1000		;CORRECT TYPE NUMBER?
	JRST GETE1		;NO, STRANGE FILE
	MOVEI 13,0(6)		;SAVE COUNT
	MOVE 1,16
	DVCHR
	TLNE 2,777		;DISK FILE?
SSAVE1:	ITERR SSAVX1		;NO, CAN'T DO IT
SGET1:	MOVE 1,SPTC		;SPT USE COUNT
	CAML 1,SPC1		;RUNNING LOW?
	ITERR GETX2		;YES, BOMB OUT
	MOVE 1,16
	BIN
	MOVEI 1,0(2)		;FILE PAGE NUMBER
	LDB 3,[POINT 9,2,8]	;ACCESS
	LDB 2,[POINT 9,2,17]	;MEMORY PAGE
	ROT 3,-^D9
	TLZE 3,(1B0)		;WRITE COPY REQUEST?
	TLO 3,COPYB		;YES, SET APPROPRIATE BITS
	HRLI 1,0(16)
	HRLI 2,0(15)
	PMAP			;MAP FILE PAGE INTO FORK
	SOJG 13,SGET1
	JRST GET2

GETINT:	SETZ 1,
	MOVEI 2,FTPG1A		;UNMAP STUFF
	CALL SETMPG
	CALL CLRLFK		;THIS DOES OKINT, INTERRUPT HAPPENS HERE
	MOVEI 1,0(15)
	CALL SETLFK		;REESTABLISH STATE
	SETO 4,
	RET

GTSVI:	MOVEI 16,0(1)		;JFN
	HLRZ 15,1		;FORK HANDLE
	MOVEI 1,0(16)		;JFN
	DVCHR			;GET DEVICE CHARACTERISTICS
				;DO THIS FIRST IN CASE OF ITRAP
	HLRZ 3,2		;SEE WHAT KIND OF DEVICE. PREVENT
	ANDI 3,777		; TTY'S, CAUSE FORK HANDLES ARE OFTEN
	CAIN 3,12		; MISPLACED INTO JFN AND LOOK LIKE TTY.
	ITERR (DESX4)		; THEN JOB HANGS NOINT ON TTY BIN
	PUSH P,2
	MOVEI 1,0(15)
	CALL SETLFK		;MAKE SURE FORK IS LEGAL
	MOVEI 1,0(16)		;JFN
	POP P,3			;DEVICE BITS
	MOVSI 2,^D36B23		;BYTE SIZE FOR BIN/BOUT XFER
	SETO 4,
	RET

;CHECK AND REMAP PAGE - 4/ CURRENT PAGE (-1 FIRST TIME)
; SET FTPG1 TO POINT INDIRECT TO USER PAGE ADDRESSED BY AC6

GET3:	TSTINT
	CALL GETINT
	LDB 2,[POINT 9,6,26]	;PAGE NUMBER NEXT REFERENCE
	CAIN 2,0(4)		;SAME AS CURRENT
	JRST GET3A		;YES
	MOVEI 4,0(2)		;REMEMBER IS CURRENT
	HRLI 2,0(15)		;FORK HANDLE
	MOVE 1,2
	CALL FKHPTN		;CONVERT TO INTERNAL FORM
	MOVE 2,14
	MOVSI 3,RWX
	CALL SETPT		;SETUP INDIRECT POINTER TO PAGE
GET3A:	MOVEI 5,0(6)		;SETUP ADDRESS FOR MON REFERENCES
	ANDI 5,777
	ADDI 5,FTPG1A
	MOVEI 1,0(16)		;RESTORE JFN TO 1
	RET

GETE2:	MOVEI 1,GETX3##		;FILE NOT PROPERLY OPENED
	JRST GETE0		;RETURN THIS ERROR CODE
GETE1:	MOVEI 1,GETX1##		;RETURN ERROR CODE
GETE0:	PUSH P,1		;SAVE THE ERROR CODE
	MOVEI 1,0(16)
	CLOSF
	JFCL
	SETZ 1,
	MOVEI 2,FTPG1A
	CALL SETMPG
	CALL CLRLFK
	POP P,1
	JRST ITRAP1		;RETURN ERROR CODE WITH ITRAP

;[SRI] Begin addition...
; GETEXE - Get routine for TOPS20 style (.EXE) sharable save files
;	   See TOPS20 Monitor Calls handbook for file format
;
; AC usage (different from above):
;
;	4) Temporary
;	5) Repeat count of number of pages to map
;	6) Count of number of words in directory section

GETEXE:	MOVEI 6,(6)		; Get count of number of entries
	SOJL 6,GETE1		; Minus one for header (must be positive)
	LSH 6,-1		; ...at two words per entry
	MOVEI 1,(16)		; Check for disk device
	DVCHR
	TLNE 2,777
	 ITERR SSAVX1		; If not, error
GETEX2:	JUMPE 6,GETEX5		; If no more entries left, then done
	CALL GETWRD
	MOVEM 2,4		; Save first word
	CALL GETWRD
	HRRZ 1,4		; Get page number in file
	JUMPE 1,GETEX4		; If zero, means "no page" so skip
	HRLI 1,(16)		; Get file handle
	MOVSI 3,READB!XCTB	; Give read and execute access at least
	TLNE 4,(1B1+1B2)	; If wanted write or share, give copy-on-write
	TLO 3,COPYB
	LDB 5,[POINT 9,2,8]	; Get repeat count
	HRLI 2,(15)		; AC2 set up from BIN, get fork handle
GETEX3:	HRRZ 4,2		; Get fork page number
	CAILE 4,777		; Is it a reasonable number?
	 JRST GETEX4		; No, go to next entry
	MOVE 4,SPTC		; Check share count
	CAML 4,SPC1		; If too high, abort
	 ITERR GETX2
	PMAP			; Map the page in
	SOJL 5,GETEX4		; If count goes negative, then done
	ADDI 1,1		; Otherwise, increment page numbers and repeat
	AOJA 2,GETEX3
GETEX4:	SOJA 6,GETEX2		; Decrement entry counter and go back
	;.....

; Now get entry vector and "end of directory" block
; AC usage	4) Temporary
;		5) B0 - Flag to denote entry vector encountered
;		6) Contains entry vector word

	;.....
GETEX5:	MOVSI 6,(JRST)		; Set up default entry vector
	SETZB 4,5		; Clear 4 (count) and 5 (flag)
GETEX6:	CALL GETWRD		; Get next directory word
	SOJGE 4,GETEX6		; Loop through until start of block
	HLRZ 4,2		; Get block type into 4
	CAIN 4,1775		; Is it entry vector?
	 JRST GETEX7		; Yes, go process
	CAIN 4,1777		; Is it end of file?
	 JRST GET1		; Yes, go store entry vector. We're done
	MOVEI 4,(2)		; Don't recognize this block, ignore
	SOJA 4,GETEX6
GETEX7:	TLOE 5,(1B0)		; Set and check if we've evec yet...
	 JRST GETE1		; Yes, we did.  Syntax error
	MOVEI 4,(2)		; Check count of this block
	SUBI 4,3		; Minus header and two for evec spec
	JUMPL 4,GETE1		; If not big enough, error
	CALL GETWRD		; Get a word
	MOVSI 6,(2)		; This is address
	CALL GETWRD
	HRRI 6,(2)		; Next word is count
	JRST GETEX6		; Fall through remaining words, and go on

; GETWRD - Gets word from file and checks for EOF

GETWRD:	MOVEI 1,(16)		; Get JFN
	BIN			; Get byte from file
	JUMPN 2,R		; Return if something there
	GTSTS			; Zero byte, check for EOF
	TLNE 2,1000		; Is flag set?
	 JRST GETE1		; Yes, error
	SETZ 2,			; Restore register
	POPJ P,			; And return
;[SRI] End addition....
