
$VACCT:	PUSH	P,1		;USER NUMBER
	PUSH	P,2		;ACCOUNT DESIGNATOR
	PUSH	P,3
	MOVEI	1,400000	;THIS FORK
	RPCAP
	TRNE	3,1B18+1B19	;WHEEL OR OP?
	JRST [	POP	P,3	
		JRST $VACC2]	;SKIP RETURN
	POP	P,3
	MOVE	2,-1(P)		;GET USER NUMBER
	SETZM	UACBLK
	MOVE	1,[UACBLK,,UACBLK+1]
	BLT	UACBLK+17	;CLEAR AC ARG BLOCK
	CAME	2,[-1]		;SELF?
	JRST $VACC1		;NO
	PUSH	P,3
	PUSH	P,4
	GJINF			;GET JOB INFO CONN DIR IN 2
	POP	P,4
	POP	P,3
$VACC1:	HRROI	1,UACBLK	;FIRST 8 AC'S CONTAIN DIRST
	DIRST
	JRST $VAFXT		;DO FAIL RETURN
	MOVE	1,0(P)		;GET ACCT DESG
	CAML	1,[500000,,0]
	CAMLE	1,[577777,,-1]	;IS IT NUMERIC?
	JRST $VASTR		;NO STRING
	MOVEM	1,UACBLK+10	;NUMERIC DESIG IN AC10
	MOVEI	1,UACBLK	;POINT TO ARG BLOCK
	MOVEI	2,1		;START AT NUMERIC ENTRY POINT
	PUSHJ	P,RUNUAC
	JRST $VACC2		;FORK FAILED TO RUN
	JRST $VACC3		;FORK RAN, CHECK RESULT
;
$VASTR:	MOVEI	2,[POINT 7,UACBLK+10] ;POINT TO AC10-17 FOR ACCT STRING
	TLC	1,-1		;DSP?
	TLCN	1,-1		;SKIP IF NOT DSP
	HRLI	1,440700	;CONVERT TO STRING POINTER
	PUSH	P,3
	PUSH	P,4
	MOVNI	4,^D39		;WE ONLY TAKE 39 CHARS
$VALUP:	ILDB	3,1
	IDPB	3,2
	CAIE	3,0		;SKIP IF NULL BYTE
	AOJL	4,$VALUP	;GET 39 CHARS MAX
	POP	P,4
	POP	P,3
	MOVEI	1,UACBLK	;POINT TO AC BLOCK
	MOVEI	2,2		;ENTRY POINT FOR STRING
	PUSHJ	P,RUNUAC
$VACC2:	AOSA	-2(P)		;RUN FAILED SAY OK
$VACC3:	CAIE	1,0		;FIND A MATCH?
$VAFXT:	JRST [	POP	P,2	
		POP	P,1
		POPJ	P,]
	JRST $VACC2		;FOUND MATCH, DO SKIP RETURN
$GDACC:	PUSH	P,1		;DSP FOR ACCT
	PUSH	P,2		;USER NUMBER
	SETZM	UACBLK
	MOVE	1,[UACBLK,,UACBLK+1]
	BLT	1,UACBLK+17	;CLEAR AC ARG BLOCK
	CAME	2,[-1]		;SELF?
	JRST $GDAC1		;NO
	PUSH	P,3
	PUSH	P,4
	GJINF			;GET CONN DIR NUM IN 2
	POP	P,4
	POP	P,3
$GDAC1:	HRROI	1,UACBLK	;POINT TO AC0-7	FOR DIRST
	DIRST
	JRST $GDFXT		;DO FAIL RETURN
	MOVEI	1,UACBLK	;POINT TO AC BLOCK
	SETZ	2,		;0 ENTRY POINT FOR DEFAULT
	PUSHJ	P,RUNUAC
	CAIA			;NON-SKIP IF FORK FAILED
	CAIE	1,0		;DID WE FIND DEFAULT?
	JRST $GDFXT		;NO, NON-SKIP
	PUSH	P,3
	PUSH	P,4
	MOVNI	3,^D39		;39 CHARS MAX
	HRRZ	2,UACBLK+2	;GET POINTER REL TO AC BLOCK
	ADD	2,[POINT 7,UACBLK] ;MAKE IT A USEFULL POINTER
	MOVE	4,-3(P)		;GET USERS POINTER
	HRLI	4,440700	;MAKE E A POINTER
$GDACL:	ILDB	1,2
	IDPB	1,4
	CAIE	1,0		;SKIP IF  A NULL
	AOJL	3,$GDACL
	POP	P,4
	POP	P,3
	AOS	-2(P)		;DO SKIP RETURN
$GDFXT:	POP	P,2
	POP	P,1
	POPJ	P,


;RUNS UACHK PROGRAM DOES NON-SKIP RETURN ON PROGRAM FAILURE
;	1/ POINTER TO AC ARG BLOCK
;	2/ ENTRY VECTOR OFFSET
;	   0=DEFAULT, 1=NUMERIC CHECK, 2=STRING CHECK

RUNUAC:	PUSH	P,1		;ARG POINTER
	PUSH	P,2		;ENTRY VECTOR
	MOVSI	1,(1B2+1B17)	;OLD FILE, SHORT FORM
	HRROI	2,[ASCIZ /<SYSTEM>UACHK.SAV/]
	GTJFN
	JRST [	POP	P,2
		POP	P,1
		POPJ	P, ]	;DO FAIL RETURN IF CANT FIND FILE
	PUSH	P,1		;JFN
RUNUA1:	MOVSI	1,(1B1)		;SET CAP DONT START
	CFORK
	JRST [	MOVEI	1,^D1000
		DISMS		;TRY AGAIN IN 1 SEC
		JRST RUNUA1]
	PUSH	P,1		;FORK HANDLE
	MOVSI	1,0(1)		;MOVE HANDLE TO LH
	HRR	1,-1(P)		;AND PUT JFN IN RH
	GET
	MOVE	1,(P)
	MOVE	2,-3(P)		;GET POINTER TO ARG BLOCK
	SFACS			;LOAD ACS
	MOVE	2,-2(P)		;GET VECTOR OFFSET
	SFRKV			;START IT
	WFORK			;WAIT FOR IT
	FFORK			;FREEZE IT
	MOVE	2,-3(P)		;POINT TO ARG BLOCK
	RFACS			;COPY BACK THE ACS
	RFSTS			;GET FORK STATUS
	TLZ	1,(1B0)		;KILL THE FREEZE BIT
	CAME	1,[2,,0]
	TLOA	2,-1		;INVOL TERMINATE
	TLZ	2,-1		;CLEAN HALT
	POP	P,1		;GET FORK HANDLE
	KFORK			;GET RID OF IT
	POP	P,1		;GET THE JFN
	RLJFN			;RELEASE IT
	JFCL			;SHOULDNT HAPPEN!!??
	MOVE	1,-1(P)		;POINT TO BLOCK
	MOVE	1,1(1)		;WE WANT THE AC1
	CAIL	2,0		;INVOL TERMINATE?
	CAILE	1,0		;OR PROGRAM ERROR?
	SOS	-2(P)		;DO NON-SKIP
	POP	P,2
	SUB	P,[1,,1]	;POP STACK AGAIN
	AOS	(P)
	POPJ	P,

	>
	>			;END OF TNX131 STRING ACCOUNTING CONDITIONAL
	>		;END OF SBMTSW CONDITIONAL - SUBMIT ONLY

;PURE DATA STORAGE

IFN	SBMTSW,<
;MAIN COMMAND LIST FOR SUBMIT PROGRAM
LIST1:	TE(.ACCOU,<ACCOUNT>)		;ACCOUNT NUMBER FOR SUBJOB LOGIN
	TE(.AFTER,<AFTER>)		;TIME JOB IS TO WAIT UNTIL
	te(.attch,<ATTACH>)		; Attach batch job to existing job
	TE(.JBMOD,<CHANGE>)		;CHANGE JOB PARAMETERS
;;;	TE(.CLEAR,<CLEAR>,ENASEE!ENADO) ;CLEAR QUEUE (DONE IN BATCTL)
	TE(.CTL,<CONTROL>)		;CONTROL FILE
	TE(.CPUT,<CPU>)			;CPU TIME MAX FOR JOB
	TE(.CTL,<CTL>)			;CONTROL FILE
	TE(.DESUB,<DESUBMIT>)		;DESUBMIT BATCH JOB
;;;	TE(.DIREC,<DIRECT>,ENASEE!ENADO)	;DIRECT SUBMIT TO QUEUE
	TE(.DSABL,<DISABLE>,WHLSEE!WHLDO)	;DISABLE CAPABILITIES
	TE(.ELTIM,<ELAPSED>)		;MAXIMUM ELAPSED TIME JOB CAN RUN
	TE(.ENABL,<ENABLE>,WHLSEE!WHLDO)	;ENABLE CAPABILITIES
	TE(.EXIT,<EXIT>)		;LEAVE SUBMIT
	TE(.GO,<GO>)			;GO DO THE SUBMIT
ifn skuser,<
	TE(.HPRIO,<HIGH>)		; High priority job execution
	>
	TE(.RUNIN,<IN>)			;RUN JOB IN XXX HRS, MIN, OR SEC
	TE(.CTL,<INPUT>)		;SAME AS CTL
IFN IMSLOG,<
	TE(.LABEL,<LABEL>)		;SET LOG FILE LABELLING FORMAT
	>
	TE(.LENGTH,<LENGTH>)		;SET LENGTH OF LOG FILE
	TE(.LIST,<LIST>)		;LIST SUBMIT STATUS/PARAMETERS
	TE(.LOAD,<LOAD>)		;LOAD AVERAGE THRESHOLD
	TE(.LOG,<LOG>)			;SPECIFY LOG FILE
ifn skuser,<
	TE(.LPRIO,<LOW>)		; Low priority job execution
	>
	TE(.MESS,<MESSAGE>)		;SEND MESSAGES TO SUBMITTER
	TE(.JBMOD,<MODIFY>)		;CHANGE JOB PARAMETERS
	TE(.NO,<NO>)			;START OF NEGATE COMMAND
	TE(.NOTFY,<NOTIFY>)		;NOTIFY USER AT BEGINING AND END OF JOB
	TE(.LOG,<OUTPUT>)		;SAME AS LOG
IFN	SKUSER<
	TE(.PRIO,<PRIORITY>)		;RUN WITH NORMAL SCHEDULING
>		;END OF IFN SKUSR
	TE(.EXIT,<QUIT>)		;SAME AS EXIT
	TE(strt1,<RESET>)		;RESTART SUBMIT
	TE(.RESTR,<RESTART>)		;NUMBER TIMES TO RESTART JOB
	TE(.RESUM,<RESUME>)		;RESUME SUSPENDED JOB
	TE(.RUNT,<RUNTIME>)		;CPU TIME MAX FOR JOB
	TE(.BSTAT,<STATUS>)		;STATUS OF BATCH SYSTEM
	TE(.SUPND,<SUSPEND>)		;SUSPEND JOB
	TE(.TIME,<TIME>)		;MAXIMUM ELAPSED TIME JOB CAN RUN
	TE(.LIST,<VERIFY>)		;SAME AS LIST
	0				;END LIST


IFN IMSLOG,<
; Following are the subcommand lists for the IMSLOG LABEL command

LIST3:	TE(.LALWY,<ALWAYS>)		;LABEL ALL LINES - OLD FORMAT
	TE(.LEVRY,<EVERY>)		;EVERY # LOG LINES
					;      # SEC SINCE LAST LABEL
	TE(.LNEVR,<NEVER>)		;OMIT LABELS ENTIRELY
	TE(.LSUBS,<SUBSYSTEM>)		;LABEL SUBSYSTEM CHANGES ONLY
	0

LIST4:	TE(.LALIN,<LINES>)		;INPUT UNITS ARE LOG LINES
	TE(.LASEC,<SECONDS>)		;INPUT UNITS ARE SECONDS
	0
	>		;END OF IMSLOG CONDITIONAL

; SUBCOMMANDS FOR "NO" COMMAND
LIST5:
	te(.naftr,<AFTER>)
	te(.natch,<ATTACH>)
IFN	IMSLOG,<
	TE(.LNEVR,<LABELS>)
	>		;END IMSLOG CONDITIONAL
	TE(.NNTMG,<MESSAGE/NOTIFY>)
	TE(.NNTMG,<NOTIFY/MESSAGE>)
ifn skuser,<
	TE(.NPRIO,<PRIORITY>)		; Remove priority execution
	>
	0


; SUBCOMMANDS FOR SUBMIT STATUS
LIST6:	TE(.BSALL,<ALL>)
	TE(.STATU,<QUEUE>)
	0
	>		;END OF SBMTSW CONDITIONAL - SUBMIT COMMAND LIST



IFE	SBMTSW,<
	;MAIN COMMAND LIST FOR CONTROL PROGRAM - MACRO DEFINED IN PARAMS
	;AND USED ALSO BY BATCON

LIST1:	CTLLST				;PRIMARY COMMAND AND DISPATCH LIST

	PURGE	CTLLST

	>		;END OF SBMTSW CONDITIONAL 


;SUBCOMMAND LIST FOR "RUN IN" COMMAND UNITS
LIST2:	TE(.RIDYS,<DAYS>)		;UNITS = DAYS
	TE(.RIHRS,<HOURS>)		;UNITS = HOURS
	TE(.RIHRS,<HRS>)
	TE(.RIMIN,<MINUTES>)		;UNITS = MINUTES
	TE(.RISEC,<SECONDS>)		;UNITS = SECONDS
	0



IFE	SBMTSW,<
;THESE ARE THE SUBCOMMANDS FOR THE STATUS COMMAND

LIST3:	TE(.BSALL,<ALL>,WHLSEE!WHLDO)		;STATUS OF BATCON PROGRAM
	TE(.SBATC,<BATCON>,WHLSEE!WHLDO)	;STATUS OF BATCON PROGRAM
	TE(.STATU,<QUEUE>,WHLSEE!WHLDO)		;STATUS OF BATCH QUEUE
	TE(.BSTRH,<TRASH>,WHLSEE!WHLDO)		;STATUS OF TRASH QUEUE
	0

;THESE ARE THE SUBCOMMANDS FOR THE CLEAR COMMAND

LIST4:	TE(.CBATC,<BATCON>,WHLSEE!WHLDO)	;CLEAR BATCON
	TE(.CQUE,<QUEUE>,WHLSEE!WHLDO)		;CLEAR BATCH QUEUE
	0

	>		;END OF SBMTSW CONDITIONAL - CONTROL COMMAND LIST

	PURGE	CQQ,TE




;NAMES OF QUEUE FILE AND QUEUE WORK FILE
	IFE	DBGFIL,<
QNAME:	ASCIZ	/<BATCH>BATCH.QUEUE;P777740/
TQNAME:	ASCIZ	/<BATCH>BAD-ENTRY.QUEUE;P777700/
IFE FDBSEQ,<
seqnam:	ASCIZ	/<BATCH>JOB-SEQUENCE.LOCK;P777760/
	>
JOBFS:	XWD	440700,[ASCIZ /<BATCH>JOB.*;*/]
DJOBS:	XWD	440700,[ASCIZ /<BATCH>DJOB.*;*/]
CJOBS:	XWD	440700,[ASCIZ /<BATCH>CJOB.*;*/]
	>
	IFN	DBGFIL,<
QNAME:	ASCIZ	/<BATCH>BATCHTEST.QUEUE;P777740/
TQNAME:	ASCIZ	/<BATCH>TBAD-ENTRY.QUEUE;P777700/
IFE FDBSEQ,<
seqnam:	ASCIZ	/<BATCH>TJOB-SEQUENCE.LOCK;P777760/
	>
JOBFS:	XWD	440700,[ASCIZ /<BATCH>TESTJOB.*;*/]
DJOBS:	XWD	440700,[ASCIZ /<BATCH>TESTDJOB.*;*/]
CJOBS:	XWD	440700,[ASCIZ /<BATCH>TESTCJOB.*;*/]
	>


;INTERRUPT SERVICE STUFF
LEVTAB:	EXP	LEV1PC,LEV2PC,LEV3PC
CHNTAB:	3,,CTLO				;^O ON CHANNEL 0
	3,,CTLC				;^C ON CHANNEL 1
	REPEAT ^D34,<0>


;LITERAL POOL
	LIT
