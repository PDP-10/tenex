# include "<Yeager>version.h"
/****************************************************************************

	ether net particular stuff.
	   e0_NetInit ()			Net0 init.
	   e1_NetInit ()			Net1 init.

	Patches:
		1. Added host bit map to each NDB and associated
		   Bit map routines.	8-dec-81  WJY

****************************************************************************/
# ifdef PDP11
# define EncapSize 4				/* Ether encap. size-8BIT  */
# endif						/* bytes. */
# ifndef PDP11
# define EncapSize 2				/* Ether encap. size-36BIT */
# endif
# define timeOut 10*h_tics			/* for output timer */
int e_EtherEncap (), e_s0input (), e_s0output ();
extern int p_0out ();
extern int l1_sQ, l0_FreeQ, l0_rawIQ, l0_discards; 
int l0_GO {0};
int l0_IGO {0};
# ifdef PDP11
extern int TODCLK, TODlow;		/* time of day clock */
# endif
/* initialize the default net */
# define ETH0Add 0160000
int e_0NDB;
int e0_NetInit (NDB) l0_NDB *NDB;
	{e_0NDB = NDB;			/* for servers */
	NDB->localHost = e0_I0init ();		/* init interface 0 */
	NDB->localNet = sumex;
	NDB->encap = e_EtherEncap;		/* encapsulation */
	NDB->l0trans = p_0out;			/* output routine */
	NDB->l0sInput = e_s0input;		/* input startup  */
	NDB->l0sOutput = e_s0output;		/* output   "     */

	/* stuff such as below must also be initiazed - HERE AND BELOW */
	NDB->ETHOWC = ETH0Add;		/* address of output word count */
	NDB->ETHOBL = ETH0Add+2;	/* output buffer location */
	NDB->ETHOCS = ETH0Add+4;	/*    "   control and status */
	NDB->ETHOSD = ETH0Add+6;	/*    "   start delay	     */	
	NDB->ETHIWC = ETH0Add+010;	/* address of input word count */
	NDB->ETHIBL = ETH0Add+012;	/* input buffer location */
	NDB->ETHICS = ETH0Add+014;	/*    "   control and status */
	/* and the random number generator */
# ifdef PDP11
	NDB->OCrandom = TODlow + NDB;
# endif
# ifndef PDP11
	NDB->OCrandom = s_gtime () + NDB;
# endif
	NDB->OCrandom &= 0377;		/* 8 bits only */
	NDB->OCload = 1;		/* delay bit mask */
	NDB->BitMap = l1_GetMEM (BitMapSize); /* pointer to bit map */
	l_zero (NDB->BitMap, BitMapSize);     /* clear the map */
	}

# ifdef NET1		/* begin NET1 definitions */
# define ETH1Add 0160020
int e_1NDB;
int e1_NetInit (NDB) l0_NDB *NDB;
	{e_1NDB = NDB;			/* for servers */
	NDB->localHost = e1_I0init ();		/* init interface 0 */
	NDB->localNet = NET2;
	NDB->encap = e_EtherEncap;		/* encapsulation */
	NDB->l0trans = p_0out;			/* output routine */
	NDB->l0sInput = e_s0input;		/* input startup  */
	NDB->l0sOutput = e_s0output;		/* output   "     */

	NDB->ETHOWC = ETH1Add;		/* address of output word count */
	NDB->ETHOBL = ETH1Add+2;	/* output buffer location */
	NDB->ETHOCS = ETH1Add+4;	/*    "   control and status */
	NDB->ETHOSD = ETH1Add+6;	/*    "   start delay	     */	
	NDB->ETHIWC = ETH1Add+010;	/* address of input word count */
	NDB->ETHIBL = ETH1Add+012;	/* input buffer location */
	NDB->ETHICS = ETH1Add+014;	/*    "   control and status */
# ifdef PDP11
	NDB->OCrandom = TODlow + NDB;
# endif
# ifndef PDP11
	NDB->OCrandom = s_gtime () + NDB;
# endif
	NDB->OCrandom &= 0377;
	NDB->OCload = 1;		/* delay bit mask */
	NDB->BitMap = l1_GetMEM (BitMapSize); /* pointer to bit map */
	l_zero (NDB->BitMap, BitMapSize);     /* clear the map */
	}
# endif		/* for NET1 definitions */

/****************************************************************************

	ENCAPSULATION routine

****************************************************************************/
int e_EtherEncap (PAK, dHOST) l0_smlPak *PAK; int dHOST;
	{PAK->Encap1 = (dHOST << 8) | (PAK->ndbPTR)->localHost;
	PAK->Encap2 = TypePUP;
	/* and finally, length in words for transmission */
# ifdef PDP11
	PAK->PAKlen = (PAK->PUPlen + 1 + EncapSize) >> 1;
# endif
# ifndef PDP11
	PAK->PAKlen = (PAK->PUPlen  + EncapSize);
# endif
	}
int e_s0Input (NDB) l0_NDB *NDB;
    	{/* start ETHER net input - USES virtual net, NDB */
# ifdef PDP11
    	int OLDpsw;
    	OLDpsw = l_6pri ();
# endif
	/* see if we can reuse prev. packet - (if it was errored) */
	/* The idea is that the interrupt server will set NDB->pakin = 0 */
	/* if the packet just input was good, otherwise leave it in NDB, */
	/* and call us. We are also called from p_FeedNETs if we are  */
	/* out of buffers and waiting for the FreeQ to get one. */

	if (!NDB->pakin)    /* then NO prev packet, try FreeQ */
	    if (!(NDB->pakin = p_Dequeue (l0_FreeQ))) return;
	/* We have an input Packet */
	/* set up input buffer address */
	NDB->ICaddr = &(NDB->pakin)->Encap1;
	*(NDB->ETHIBL) = NDB->ICaddr;	/* interface register */
	/* input word count */
	*(NDB->ETHIWC) = -MaxRawPUP-1;
					/* NOTE: -1 is for CRC which MAY*/
					/* be counted in IWC but not stored */
					/* in memory - Depends on board.*/
	++l0_IGO;
	*(NDB->ETHICS) = 0101;		/* GO!   */
# ifdef PDP11
    	l_Opri (OLDpsw);		/* restore OLD priority */
# endif
    }

# ifdef PDP11
extern int TODCLK, TODlow;
# endif
int e_s0output (NDB) l0_NDB *NDB;
    {/* start ETHER output */
    l0_smlPak *Pak; 
# ifdef PDP11
    int OLDpsw;
    OLDpsw = l_6pri ();
# endif
    /* get a packet for output */
    if (NDB->pakOUT) Pak = NDB->pakOUT;	/* resend this one */
    else
	if (NDB->OQhead)		/* dequeue next one */
            Pak = p_Dequeue (&NDB->OQhead);
	else  Pak = 0;			/* nothing to do */
    NDB->pakOUT = Pak;			/* Current one for output */
    if (Pak)	/* then send it */
        {/* set xmitTimer, xmit1 */
	int ran, oldRan;
# ifdef PDP11
	NDB->xmitTimer = TODCLK; NDB->xmit1 = TODlow;
	l_longAdd (&NDB->xmitTimer, &NDB->xmit1, 0, timeOut);
# endif
# ifndef PDP11
	NDB->xmitTimer = s_gtime () + timeOut; NDB->xmit1 = 0;
# endif
	/* Packet length for transmission */
	NDB->OCount = (-PAK->PakLEN) & ~Omask;	/* 10 or 11 bits only */
	*(NDB->ETHOWC) = NDB->OCount;		/* store 16 bits */

	/* starting output address at encapsulation offset */
	NDB->OCaddr = &Pak->Encap1;
	*(NDB->ETHOBL) = NDB->OCaddr;
	/* calculate random number - from Knuth */
	/* X(0) = low order bits of TODCLK     */
	/* X(n) = [a*X(n-1) + c] mod m, n = 1, 2, ... where, */
	/* 	Here a = 5, c = 19 (a la Knuth's remark - 65536 is */
	/*	NOT big enough to generate truly random numbers.   */
	/*	Let a = 5 and c = your favorite ODD number.	   */
	/*  	ie, a = 2^2 + 1.				   */
	/* NOTE: 1st delay is always 0 since OCLoad(0) = 0.	   */
	oldRan = NDB->OCrandom;
	ran = oldRan << 2;
	ran += oldRan;
	ran += 19;
	NDB->OCrandom = ran;		/* save for next time */
	/* calculate output start delay */
	ran &= NDB->OCload;		/* extract bits as per LOAD */
	NDB->OCload = (NDB->OCload << 1) + 1; /* 1, 3, 7, 15, 31,...,65535 */
	if (ran <= 1) ran = 2;		/* USE some delay - a la NICK V */
					/* MOST IMPORTANT. A delay of 1 */
					/* must NEVER be used with NICK'S */
					/* board until bug is fixed */
# ifdef Veizades
	ran = -ran;			/* 2's compliment 16 bits worth */
# endif
	*(NDB->ETHOSD) = ran;		/* load delay in bits 0 - 7 */
	++l0_GO;			/* keep go count */
	*(NDB->ETHOCS) = 0101;		/* go ! */
	}
# ifdef PDP11
    l_Opri (OLDpsw);
# endif
    }

/* :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *	e_getMapPTR (NDB, host)		Given host number, returns
 *					a pointer to its bit map WORD 
 *
 * ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: */
short int *e_getMapPTR (NDB, host) l0_NDB *NDB; short int host;
    {char *i;
    i = (char *)NDB->BitMap;		/* point to the bit map */
    i += ((host >> 4) << (sizeof(host)-1));	/* DIV 16 */
                            		/* with short int addressing */
    return((short int *)i);		/* point to the bit map */
    }

/* :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *	e_MapSet (MapWord, host)	Given host number, and MapWord
 *					pointer, turns on bit in map word
 *					corresponding to that host.
 *
 *	For 8 bit hosts, the bit map is 16 16Bit words; host DIV 16 yields
 *	the word offset, and host MOD 16 yields the bit position in that
 *      word(bit 0 is LSB!!!);
 * ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: */
e_MapSet (MapWord, host) short int *MapWord, host;
    {int i;
    i = host & 017;		/* low 4 bits only */
    *MapWord |= (1 << i);
    }


/* :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *	e_TestBit (MapWord, host)	Given host number, and MapWord
 *					pointer, returns 0 or 1 corresponding
 *					to host bitmap bit.
 * ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: */
int e_TestBit (MapWord, host) short int *MapWord, host;
    {int i;	
    i = host & 017;		/* low 4 bits only */
    return (*MapWord & (1 << i));
    }




